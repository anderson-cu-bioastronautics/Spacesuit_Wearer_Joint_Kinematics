
lsm6dsl_calib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d34  08005d34  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d3c  08005d3c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fbc  20000020  08005d64  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fdc  08005d64  00021fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011170  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002794  00000000  00000000  000311c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00033958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c96  00000000  00000000  00035640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d184  00000000  00000000  0004d2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e335  00000000  00000000  0005a45a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e878f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  000e880c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005c64 	.word	0x08005c64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	08005c64 	.word	0x08005c64

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <SystemClock_Config>:
 * PPL value can be generated from the .ioc file in the project
 * IMPORTANT:
 * When use external clock source HSEState must be set to RCC_HSE_ON (Flash chip purpose)
 */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	; 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0320 	add.w	r3, r7, #32
 80004de:	2230      	movs	r2, #48	; 0x30
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 fbb6 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]

  // Configure the main internal regulator output voltage
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <SystemClock_Config+0xd0>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000500:	4a28      	ldr	r2, [pc, #160]	; (80005a4 <SystemClock_Config+0xd0>)
 8000502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000506:	6413      	str	r3, [r2, #64]	; 0x40
 8000508:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <SystemClock_Config+0xd0>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <SystemClock_Config+0xd4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000520:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <SystemClock_Config+0xd4>)
 8000522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <SystemClock_Config+0xd4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  // Initializes the CPU, AHB and APB busses clocks
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000534:	2301      	movs	r3, #1
 8000536:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
   RCC_OscInitStruct.PLL.PLLM = 8;
 8000548:	2308      	movs	r3, #8
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
   RCC_OscInitStruct.PLL.PLLN = 336;
 800054c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000552:	2304      	movs	r3, #4
 8000554:	64bb      	str	r3, [r7, #72]	; 0x48
   RCC_OscInitStruct.PLL.PLLQ = 7;
 8000556:	2307      	movs	r3, #7
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fb1a 	bl	8002b98 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800056a:	f000 fe5b 	bl	8001224 <Error_Handler>
  }
  // Initializes the CPU, AHB and APB busses clocks
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fd74 	bl	8003078 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000596:	f000 fe45 	bl	8001224 <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3750      	adds	r7, #80	; 0x50
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40007000 	.word	0x40007000

080005ac <HAL_SPI_TxRxCpltCallback>:
 *SPI DMA handler, being called after completed one transmit&receive
 *PULL up SPI CS pin after done with transmission, disable SPI DMA
 *Check if data in FIFO, Set flag accordingly for the FSM
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 80005b4:	bf00      	nop
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80005b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b02      	cmp	r3, #2
 80005c0:	d0f9      	beq.n	80005b6 <HAL_SPI_TxRxCpltCallback+0xa>
	HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_SPI_TxRxCpltCallback+0x40>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_SPI_TxRxCpltCallback+0x44>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	f002 fac9 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_SPI_DMAPause(&hspi1);
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80005d4:	f003 fb7e 	bl	8003cd4 <HAL_SPI_DMAPause>
//	{
//		 state = 0;															// If empty,
//		 BUFFER_ORDER = 0;
//	}
//	else state = 1;
	FSM_CHECKED_FLAG = 0;													// Set flag to check FSM on next main program iteration
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_SPI_TxRxCpltCallback+0x48>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000214 	.word	0x20000214
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	20000090 	.word	0x20000090
 80005f4:	20000078 	.word	0x20000078

080005f8 <DMA_FSM_BURST6>:
 * state 1: read execution
 * 			BUFFER_ORDER：  6 read execution
 * 			BUFFER_ORDER: 0 data storage
 */
void DMA_FSM_BURST6(int *csCount, struct RxBuffer *My, int I[nIMUs])
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	FSM_CHECKED_FLAG = 1;
 8000604:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <DMA_FSM_BURST6+0x1fc>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
	if(((EDMA[2]&isEmptyDMA)==isEmptyDMA))													// Check if FIFO is empty (logical AND between FIFO_S2 register value and isEmpty bit)
 800060a:	4b7b      	ldr	r3, [pc, #492]	; (80007f8 <DMA_FSM_BURST6+0x200>)
 800060c:	789b      	ldrb	r3, [r3, #2]
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01e      	beq.n	8000654 <DMA_FSM_BURST6+0x5c>
	{																						// If empty, reset FIFO data available flag, change to next IMU in array, and read its FIFO status register
		fFIFO_DATA_AVAIL = 0;
 8000616:	4b79      	ldr	r3, [pc, #484]	; (80007fc <DMA_FSM_BURST6+0x204>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		*csCount = *csCount ==(nIMUs-1)? 0 : *csCount+1;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d003      	beq.n	800062c <DMA_FSM_BURST6+0x34>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	e000      	b.n	800062e <DMA_FSM_BURST6+0x36>
 800062c:	2300      	movs	r3, #0
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	6013      	str	r3, [r2, #0]
		chipSelection(*csCount);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f9dc 	bl	80009f4 <chipSelection>
		spi_DMA_RX(FIFO_S2, EDMA, Ports, Pins,2);
 800063c:	4b70      	ldr	r3, [pc, #448]	; (8000800 <DMA_FSM_BURST6+0x208>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <DMA_FSM_BURST6+0x20c>)
 8000642:	8819      	ldrh	r1, [r3, #0]
 8000644:	2302      	movs	r3, #2
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	460b      	mov	r3, r1
 800064a:	496b      	ldr	r1, [pc, #428]	; (80007f8 <DMA_FSM_BURST6+0x200>)
 800064c:	486e      	ldr	r0, [pc, #440]	; (8000808 <DMA_FSM_BURST6+0x210>)
 800064e:	f000 ffbf 	bl	80015d0 <spi_DMA_RX>
				fFIFO_DATA_AVAIL = 0;
				spi_DMA_RX(FIFO_S2, EDMA, Ports, Pins, 2);
				break;
		}
	}
}
 8000652:	e0cb      	b.n	80007ec <DMA_FSM_BURST6+0x1f4>
		switch (fFIFO_DATA_AVAIL)
 8000654:	4b69      	ldr	r3, [pc, #420]	; (80007fc <DMA_FSM_BURST6+0x204>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <DMA_FSM_BURST6+0x6a>
 800065c:	2b01      	cmp	r3, #1
 800065e:	d00f      	beq.n	8000680 <DMA_FSM_BURST6+0x88>
}
 8000660:	e0c4      	b.n	80007ec <DMA_FSM_BURST6+0x1f4>
				fFIFO_DATA_AVAIL = 1;														// Set FIFO data available flag to indicate read was initiated
 8000662:	4b66      	ldr	r3, [pc, #408]	; (80007fc <DMA_FSM_BURST6+0x204>)
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
				spi_DMA_RX(&FIFO_ADD6[0], TEMP6, Ports, Pins, 13);								// Initiate read
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <DMA_FSM_BURST6+0x208>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b65      	ldr	r3, [pc, #404]	; (8000804 <DMA_FSM_BURST6+0x20c>)
 800066e:	8819      	ldrh	r1, [r3, #0]
 8000670:	230d      	movs	r3, #13
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	460b      	mov	r3, r1
 8000676:	4965      	ldr	r1, [pc, #404]	; (800080c <DMA_FSM_BURST6+0x214>)
 8000678:	4865      	ldr	r0, [pc, #404]	; (8000810 <DMA_FSM_BURST6+0x218>)
 800067a:	f000 ffa9 	bl	80015d0 <spi_DMA_RX>
				break;
 800067e:	e0b5      	b.n	80007ec <DMA_FSM_BURST6+0x1f4>
				My[*csCount].RxBuffer_OMX[I[*csCount]] = (int16_t)((TEMP6[4]<<8)|(TEMP6[2]));
 8000680:	4b62      	ldr	r3, [pc, #392]	; (800080c <DMA_FSM_BURST6+0x214>)
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	b218      	sxth	r0, r3
 8000688:	4b60      	ldr	r3, [pc, #384]	; (800080c <DMA_FSM_BURST6+0x214>)
 800068a:	789b      	ldrb	r3, [r3, #2]
 800068c:	b219      	sxth	r1, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000698:	fb03 f302 	mul.w	r3, r3, r2
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	4413      	add	r3, r2
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	0092      	lsls	r2, r2, #2
 80006a6:	687c      	ldr	r4, [r7, #4]
 80006a8:	4422      	add	r2, r4
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	4301      	orrs	r1, r0
 80006ae:	b209      	sxth	r1, r1
 80006b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				My[*csCount].RxBuffer_OMY[I[*csCount]] =  (int16_t)((TEMP6[8]<<8)|(TEMP6[6]));
 80006b4:	4b55      	ldr	r3, [pc, #340]	; (800080c <DMA_FSM_BURST6+0x214>)
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	b218      	sxth	r0, r3
 80006bc:	4b53      	ldr	r3, [pc, #332]	; (800080c <DMA_FSM_BURST6+0x214>)
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	b219      	sxth	r1, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80006cc:	fb03 f302 	mul.w	r3, r3, r2
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	687c      	ldr	r4, [r7, #4]
 80006dc:	4422      	add	r2, r4
 80006de:	6812      	ldr	r2, [r2, #0]
 80006e0:	4301      	orrs	r1, r0
 80006e2:	b209      	sxth	r1, r1
 80006e4:	3264      	adds	r2, #100	; 0x64
 80006e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				My[*csCount].RxBuffer_OMZ[I[*csCount]] = (int16_t)((TEMP6[12]<<8)|(TEMP6[10]));
 80006ea:	4b48      	ldr	r3, [pc, #288]	; (800080c <DMA_FSM_BURST6+0x214>)
 80006ec:	7b1b      	ldrb	r3, [r3, #12]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b218      	sxth	r0, r3
 80006f2:	4b46      	ldr	r3, [pc, #280]	; (800080c <DMA_FSM_BURST6+0x214>)
 80006f4:	7a9b      	ldrb	r3, [r3, #10]
 80006f6:	b219      	sxth	r1, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000702:	fb03 f302 	mul.w	r3, r3, r2
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	4413      	add	r3, r2
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	687c      	ldr	r4, [r7, #4]
 8000712:	4422      	add	r2, r4
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	4301      	orrs	r1, r0
 8000718:	b209      	sxth	r1, r1
 800071a:	32c8      	adds	r2, #200	; 0xc8
 800071c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				My[*csCount].RxBuffer_AX[I[*csCount]] =  (int16_t)((TEMP6[16]<<8)|(TEMP6[14]));
 8000720:	4b3a      	ldr	r3, [pc, #232]	; (800080c <DMA_FSM_BURST6+0x214>)
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	b218      	sxth	r0, r3
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <DMA_FSM_BURST6+0x214>)
 800072a:	7b9b      	ldrb	r3, [r3, #14]
 800072c:	b219      	sxth	r1, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000738:	fb03 f302 	mul.w	r3, r3, r2
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	687c      	ldr	r4, [r7, #4]
 8000748:	4422      	add	r2, r4
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4301      	orrs	r1, r0
 800074e:	b209      	sxth	r1, r1
 8000750:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 8000754:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				My[*csCount].RxBuffer_AY[I[*csCount]] = (int16_t)((TEMP6[20]<<8)|(TEMP6[18]));
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <DMA_FSM_BURST6+0x214>)
 800075a:	7d1b      	ldrb	r3, [r3, #20]
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	b218      	sxth	r0, r3
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <DMA_FSM_BURST6+0x214>)
 8000762:	7c9b      	ldrb	r3, [r3, #18]
 8000764:	b219      	sxth	r1, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000770:	fb03 f302 	mul.w	r3, r3, r2
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	4413      	add	r3, r2
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	6812      	ldr	r2, [r2, #0]
 800077c:	0092      	lsls	r2, r2, #2
 800077e:	687c      	ldr	r4, [r7, #4]
 8000780:	4422      	add	r2, r4
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	4301      	orrs	r1, r0
 8000786:	b209      	sxth	r1, r1
 8000788:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 800078c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				My[*csCount].RxBuffer_AZ[I[*csCount]] = (int16_t)((TEMP6[24]<<8)|(TEMP6[22]));
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <DMA_FSM_BURST6+0x214>)
 8000792:	7e1b      	ldrb	r3, [r3, #24]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b218      	sxth	r0, r3
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <DMA_FSM_BURST6+0x214>)
 800079a:	7d9b      	ldrb	r3, [r3, #22]
 800079c:	b219      	sxth	r1, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80007a8:	fb03 f302 	mul.w	r3, r3, r2
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	687c      	ldr	r4, [r7, #4]
 80007b8:	4422      	add	r2, r4
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	4301      	orrs	r1, r0
 80007be:	b209      	sxth	r1, r1
 80007c0:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 80007c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				DP_FLAG = 1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <DMA_FSM_BURST6+0x21c>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
				fFIFO_DATA_AVAIL = 0;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <DMA_FSM_BURST6+0x204>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
				spi_DMA_RX(FIFO_S2, EDMA, Ports, Pins, 2);
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <DMA_FSM_BURST6+0x208>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <DMA_FSM_BURST6+0x20c>)
 80007da:	8819      	ldrh	r1, [r3, #0]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	460b      	mov	r3, r1
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <DMA_FSM_BURST6+0x200>)
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <DMA_FSM_BURST6+0x210>)
 80007e6:	f000 fef3 	bl	80015d0 <spi_DMA_RX>
				break;
 80007ea:	bf00      	nop
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	20000078 	.word	0x20000078
 80007f8:	20000074 	.word	0x20000074
 80007fc:	20000058 	.word	0x20000058
 8000800:	2000008c 	.word	0x2000008c
 8000804:	20000090 	.word	0x20000090
 8000808:	20000010 	.word	0x20000010
 800080c:	2000003c 	.word	0x2000003c
 8000810:	20000000 	.word	0x20000000
 8000814:	2000007c 	.word	0x2000007c

08000818 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */
#include "main.h"
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b3b      	ldr	r3, [pc, #236]	; (8000920 <MX_GPIO_Init+0x108>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <MX_GPIO_Init+0x108>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b38      	ldr	r3, [pc, #224]	; (8000920 <MX_GPIO_Init+0x108>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b34      	ldr	r3, [pc, #208]	; (8000920 <MX_GPIO_Init+0x108>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a33      	ldr	r2, [pc, #204]	; (8000920 <MX_GPIO_Init+0x108>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0x108>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x108>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2c      	ldr	r2, [pc, #176]	; (8000920 <MX_GPIO_Init+0x108>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <MX_GPIO_Init+0x108>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <MX_GPIO_Init+0x108>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <MX_GPIO_Init+0x108>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <MX_GPIO_Init+0x108>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x10c>)
 80008b8:	f001 ffba 	bl	8002830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4813      	ldr	r0, [pc, #76]	; (8000924 <MX_GPIO_Init+0x10c>)
 80008d6:	f001 ffab 	bl	8002830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_2;
 80008da:	f24e 033c 	movw	r3, #57404	; 0xe03c
 80008de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_GPIO_Init+0x110>)
 80008f4:	f001 ff9c 	bl	8002830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_7;
 80008f8:	f640 4381 	movw	r3, #3201	; 0xc81
 80008fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_GPIO_Init+0x114>)
 8000912:	f001 ff8d 	bl	8002830 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400
 800092c:	40020800 	.word	0x40020800

08000930 <Buffer_Init>:

//Set struct My to zero after declaration
//Input My, pass by pointer
//Output NONE
void Buffer_Init(struct RxBuffer My[])
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<nIMUs; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e053      	b.n	80009e6 <Buffer_Init+0xb6>
	{
		memset (My[i].RxBuffer_OMX, 0, sizeof(My[i].RxBuffer_OMX));
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000944:	fb02 f303 	mul.w	r3, r2, r3
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	22c8      	movs	r2, #200	; 0xc8
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f005 f97f 	bl	8005c54 <memset>
		memset (My[i].RxBuffer_OMY, 0, sizeof(My[i].RxBuffer_OMY));
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	33c8      	adds	r3, #200	; 0xc8
 8000966:	22c8      	movs	r2, #200	; 0xc8
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f005 f972 	bl	8005c54 <memset>
		memset (My[i].RxBuffer_OMZ, 0, sizeof(My[i].RxBuffer_OMZ));
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000982:	22c8      	movs	r2, #200	; 0xc8
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f964 	bl	8005c54 <memset>
		memset (My[i].RxBuffer_AX,  0, sizeof(My[i].RxBuffer_AX));
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800099e:	22c8      	movs	r2, #200	; 0xc8
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f005 f956 	bl	8005c54 <memset>
		memset (My[i].RxBuffer_AY,  0, sizeof(My[i].RxBuffer_AY));
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80009ae:	fb02 f303 	mul.w	r3, r2, r3
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80009ba:	22c8      	movs	r2, #200	; 0xc8
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 f948 	bl	8005c54 <memset>
		memset (My[i].RxBuffer_AZ,  0, sizeof(My[i].RxBuffer_AZ));
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80009d6:	22c8      	movs	r2, #200	; 0xc8
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 f93a 	bl	8005c54 <memset>
	for(int i = 0; i<nIMUs; i++)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b05      	cmp	r3, #5
 80009ea:	dda8      	ble.n	800093e <Buffer_Init+0xe>
	}
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <chipSelection>:
}

//SPI chip selection
//Output: change CS GPIO globally
void chipSelection(int cs)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	switch(cs)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b05      	cmp	r3, #5
 8000a00:	d86b      	bhi.n	8000ada <chipSelection+0xe6>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <chipSelection+0x14>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a21 	.word	0x08000a21
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000a61 	.word	0x08000a61
 8000a14:	08000a81 	.word	0x08000a81
 8000a18:	08000a9f 	.word	0x08000a9f
 8000a1c:	08000abd 	.word	0x08000abd
	{
	  case 0:
		  Ports = GPIOB;
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <chipSelection+0xf0>)
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <chipSelection+0xf4>)
 8000a24:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_15;
 8000a26:	4b31      	ldr	r3, [pc, #196]	; (8000aec <chipSelection+0xf8>)
 8000a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a2c:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <chipSelection+0xf0>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <chipSelection+0xf8>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f002 f893 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000a3e:	e04c      	b.n	8000ada <chipSelection+0xe6>
	  case 1:
		  Ports = GPIOB;
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <chipSelection+0xf0>)
 8000a42:	4a29      	ldr	r2, [pc, #164]	; (8000ae8 <chipSelection+0xf4>)
 8000a44:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_14;
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <chipSelection+0xf8>)
 8000a48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4c:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <chipSelection+0xf0>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	4b26      	ldr	r3, [pc, #152]	; (8000aec <chipSelection+0xf8>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f002 f883 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000a5e:	e03c      	b.n	8000ada <chipSelection+0xe6>
	  case 2:
		  Ports = GPIOB;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <chipSelection+0xf0>)
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <chipSelection+0xf4>)
 8000a64:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_13;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <chipSelection+0xf8>)
 8000a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6c:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <chipSelection+0xf0>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <chipSelection+0xf8>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2201      	movs	r2, #1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f002 f873 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000a7e:	e02c      	b.n	8000ada <chipSelection+0xe6>
	  case 3:
		  Ports = GPIOB;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <chipSelection+0xf0>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <chipSelection+0xf4>)
 8000a84:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_3;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <chipSelection+0xf8>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <chipSelection+0xf0>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <chipSelection+0xf8>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	2201      	movs	r2, #1
 8000a96:	4619      	mov	r1, r3
 8000a98:	f002 f864 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000a9c:	e01d      	b.n	8000ada <chipSelection+0xe6>
	  case 4:
		  Ports = GPIOB;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <chipSelection+0xf0>)
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <chipSelection+0xf4>)
 8000aa2:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_4;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <chipSelection+0xf8>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <chipSelection+0xf0>)
 8000aac:	6818      	ldr	r0, [r3, #0]
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <chipSelection+0xf8>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f002 f855 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000aba:	e00e      	b.n	8000ada <chipSelection+0xe6>
	  case 5:
		  Ports = GPIOB;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <chipSelection+0xf0>)
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <chipSelection+0xf4>)
 8000ac0:	601a      	str	r2, [r3, #0]
		  Pins = GPIO_PIN_5;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <chipSelection+0xf8>)
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(Ports, Pins, GPIO_PIN_SET );
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <chipSelection+0xf0>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <chipSelection+0xf8>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f002 f846 	bl	8002b64 <HAL_GPIO_WritePin>
		  break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000008c 	.word	0x2000008c
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	20000090 	.word	0x20000090

08000af0 <resetAll>:
//Reset configuration for all IMUs on the board (not just ones in use)
//Wait 5ms for proper reset
void resetAll()
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	//for(int i =0; i<nIMUs;i++)
//	for(int i = nIMUs-1; i>=0; i--)
	for(int i = 5; i>=0; i--)
 8000af6:	2305      	movs	r3, #5
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	e010      	b.n	8000b1e <resetAll+0x2e>
	{
		chipSelection(i);
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ff79 	bl	80009f4 <chipSelection>
		IMU_reset(Ports, Pins);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <resetAll+0x3c>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <resetAll+0x40>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4610      	mov	r0, r2
 8000b0e:	f000 f919 	bl	8000d44 <IMU_reset>
		HAL_Delay(5);
 8000b12:	2005      	movs	r0, #5
 8000b14:	f001 f9c8 	bl	8001ea8 <HAL_Delay>
	for(int i = 5; i>=0; i--)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	daeb      	bge.n	8000afc <resetAll+0xc>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000008c 	.word	0x2000008c
 8000b30:	20000090 	.word	0x20000090

08000b34 <setupAll>:
//Configure all IMUs on the board (not just ones in use)
void setupAll()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
	//for (int i = 0; i<nIMUs; i++)
//	for(int i = nIMUs-1; i>=0; i--)
	for(int i = 5; i>=0; i--)
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	e02d      	b.n	8000b9c <setupAll+0x68>
	{
		chipSelection(i);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff57 	bl	80009f4 <chipSelection>
		IMU_config(Ports, Pins);
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <setupAll+0x78>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <setupAll+0x7c>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4610      	mov	r0, r2
 8000b52:	f000 f89f 	bl	8000c94 <IMU_config>
		PEDO_config(Ports, Pins);
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <setupAll+0x78>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <setupAll+0x7c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4610      	mov	r0, r2
 8000b62:	f000 f827 	bl	8000bb4 <PEDO_config>
		TimeStamp_config(Ports, Pins);
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <setupAll+0x78>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <setupAll+0x7c>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4610      	mov	r0, r2
 8000b72:	f000 f93f 	bl	8000df4 <TimeStamp_config>
		INTTrigger(Ports, Pins);											//Sync ODR with PWM
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <setupAll+0x78>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <setupAll+0x7c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4610      	mov	r0, r2
 8000b82:	f000 f985 	bl	8000e90 <INTTrigger>
		FIFO_config(Ports, Pins);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <setupAll+0x78>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <setupAll+0x7c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4610      	mov	r0, r2
 8000b92:	f000 f9c3 	bl	8000f1c <FIFO_config>
	for(int i = 5; i>=0; i--)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dace      	bge.n	8000b40 <setupAll+0xc>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000008c 	.word	0x2000008c
 8000bb0:	20000090 	.word	0x20000090

08000bb4 <PEDO_config>:
	return (int16_t)((uint8_t)(temp[1])<<8 | (uint8_t)(temp[0]));
}


void PEDO_config(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b090      	sub	sp, #64	; 0x40
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
	uint16_t add[2] = {(0x80|CTRL10_C<<8),(0x80|INT1_CTRL<<8)};
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <PEDO_config+0xd4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t r1[1] = {0};
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	spi_RX(&add[0],r1,Port,Pin);
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000bd2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	f000 fd18 	bl	800160c <spi_RX>
	uint8_t r2[1] = {0};
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	spi_RX(&add[1],r2,Port,Pin);
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000be8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bec:	1c98      	adds	r0, r3, #2
 8000bee:	4613      	mov	r3, r2
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	f000 fd0b 	bl	800160c <spi_RX>
	uint16_t pedo_config[6]  	= {
 8000bf6:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <PEDO_config+0xd8>)
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
									(FUNC_CFG_ACCESS<<8|0x00),
									(CTRL1_XL<<8|accelcfg16k),///changed
									(CTRL10_C<<8|0b00110100),
									(INT1_CTRL<<8|0b10111011)
									};
	uint16_t pedo_configcheck[6] = {
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <PEDO_config+0xdc>)
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
									((0x80|CTRL1_XL)<<8),
								    ((0x80|CTRL10_C)<<8),
									((0x80|INT1_CTRL)<<8)
									};

	uint8_t shouldbe[6] = {0};											//The actual configuration we write to register
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	809a      	strh	r2, [r3, #4]
	uint8_t actual_16[6] = {0};											//The actual configuration we read from register
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 6; i ++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c26:	e027      	b.n	8000c78 <PEDO_config+0xc4>
	{
		spi_write(&pedo_config[i],Port,Pin);
 8000c28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fd10 	bl	800165c <spi_write>
		spi_RX(&pedo_configcheck[i], &actual_16[i],Port,Pin);
 8000c3c:	f107 0218 	add.w	r2, r7, #24
 8000c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	18d0      	adds	r0, r2, r3
 8000c46:	f107 0208 	add.w	r2, r7, #8
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	18d1      	adds	r1, r2, r3
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	f000 fcdb 	bl	800160c <spi_RX>
		shouldbe[i] = pedo_config[i];
 8000c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c5e:	4413      	add	r3, r2
 8000c60:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000c64:	b2d9      	uxtb	r1, r3
 8000c66:	f107 0210 	add.w	r2, r7, #16
 8000c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c6c:	4413      	add	r3, r2
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i ++)
 8000c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c74:	3301      	adds	r3, #1
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	ddd4      	ble.n	8000c28 <PEDO_config+0x74>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	3740      	adds	r7, #64	; 0x40
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08005c80 	.word	0x08005c80
 8000c8c:	08005c84 	.word	0x08005c84
 8000c90:	08005c90 	.word	0x08005c90

08000c94 <IMU_config>:



void IMU_config(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	uint16_t IMU_configbuffer[9] 	  = {(INT1_CTRL<<8|intctrl),
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <IMU_config+0xa8>)
 8000ca2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	8023      	strh	r3, [r4, #0]
											(CTRL6_C<<8|ctrl6),
											(CTRL3_C<<8|ctrl3),
											(CTRL5_C<<8|ctrl5),
											(CTRL8_XL<<8|ctrl8cfg),
											(MASTER_CONFIG<<8|MASTER_SENSOR)};
	uint16_t IMU_configbuffercheck[9] = {((0x80|INT1_CTRL)<<8),
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <IMU_config+0xac>)
 8000cb2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbc:	682b      	ldr	r3, [r5, #0]
 8000cbe:	8023      	strh	r3, [r4, #0]
											((0x80|CTRL3_C)<<8),
											((0x80|CTRL5_C)<<8),
											((0x80|CTRL8_XL)<<8),
											((0x80|MASTER_CONFIG)<<8)};

	uint8_t shouldbe[9] = {0};											//The actual configuration we write to register
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	721a      	strb	r2, [r3, #8]
	uint8_t actual_16[9] = {0};										    //The actual configuration we read from register
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	721a      	strb	r2, [r3, #8]
	for (int i =0; i<9;i++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cdc:	e027      	b.n	8000d2e <IMU_config+0x9a>
	{
		spi_write(&IMU_configbuffer[i],Port,Pin);
 8000cde:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	887a      	ldrh	r2, [r7, #2]
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fcb5 	bl	800165c <spi_write>
		spi_RX(&IMU_configbuffercheck[i], &actual_16[i],Port,Pin);
 8000cf2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	18d0      	adds	r0, r2, r3
 8000cfc:	f107 020c 	add.w	r2, r7, #12
 8000d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d02:	18d1      	adds	r1, r2, r3
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	f000 fc80 	bl	800160c <spi_RX>
		shouldbe[i] = IMU_configbuffer[i];
 8000d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d14:	4413      	add	r3, r2
 8000d16:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000d1a:	b2d9      	uxtb	r1, r3
 8000d1c:	f107 0218 	add.w	r2, r7, #24
 8000d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d22:	4413      	add	r3, r2
 8000d24:	460a      	mov	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<9;i++)
 8000d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	ddd4      	ble.n	8000cde <IMU_config+0x4a>
	}
}
 8000d34:	bf00      	nop
 8000d36:	3750      	adds	r7, #80	; 0x50
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3c:	08005c9c 	.word	0x08005c9c
 8000d40:	08005cb0 	.word	0x08005cb0

08000d44 <IMU_reset>:


void IMU_reset(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
	uint16_t reset_buffer[3] = {(CTRL3_C<<8|0b10000001),
 8000d50:	4a26      	ldr	r2, [pc, #152]	; (8000dec <IMU_reset+0xa8>)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d5a:	6018      	str	r0, [r3, #0]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	8019      	strh	r1, [r3, #0]
								(CTRL10_C<<8|ctrl10_pedo_reset),
								(TIMESTAMP2_REG<<8|timerreset),

								};
	uint16_t reset_buffercheck[3] = {
 8000d60:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <IMU_reset+0xac>)
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	8019      	strh	r1, [r3, #0]
									((0x80|CTRL3_C)<<8),
									((0x80|CTRL10_C)<<8),
									((0x80|TIMESTAMP2_REG)<<8),

									};
	uint8_t shouldbe[3] = {0,0,0};									//The actual configuration we write to register
 8000d70:	2300      	movs	r3, #0
 8000d72:	743b      	strb	r3, [r7, #16]
 8000d74:	2300      	movs	r3, #0
 8000d76:	747b      	strb	r3, [r7, #17]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	74bb      	strb	r3, [r7, #18]
	uint8_t actual_16[3] = {0,0,0};									//The actual configuration we read from register
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	733b      	strb	r3, [r7, #12]
 8000d80:	2300      	movs	r3, #0
 8000d82:	737b      	strb	r3, [r7, #13]
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]

	for (int i =0; i<3;i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	e027      	b.n	8000dde <IMU_reset+0x9a>
	{
		spi_write(&reset_buffer[i],Port,Pin);
 8000d8e:	f107 021c 	add.w	r2, r7, #28
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fc5d 	bl	800165c <spi_write>
		spi_RX(&reset_buffercheck[i], &actual_16[i],Port,Pin);
 8000da2:	f107 0214 	add.w	r2, r7, #20
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	18d0      	adds	r0, r2, r3
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	18d1      	adds	r1, r2, r3
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	f000 fc28 	bl	800160c <spi_RX>
		shouldbe[i] = reset_buffer[i];
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000dca:	b2d9      	uxtb	r1, r3
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	4413      	add	r3, r2
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<3;i++)
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	3301      	adds	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	ddd4      	ble.n	8000d8e <IMU_reset+0x4a>
	}
}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08005cc4 	.word	0x08005cc4
 8000df0:	08005ccc 	.word	0x08005ccc

08000df4 <TimeStamp_config>:



void TimeStamp_config(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
	uint16_t timestamp_buffer[4] 	=  {(CTRL1_XL<<8|0b11111100),
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <TimeStamp_config+0x94>)
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e0a:	e883 0003 	stmia.w	r3, {r0, r1}
										(WAKE_UP_DUR<<8|wakeupcfg),
										(CTRL10_C<<8|0b110100),
										(MD1_CFG<<8|mdcfg)};

	uint16_t timestamp_buffercheck[4] = {((0x80|CTRL1_XL)<<8),
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <TimeStamp_config+0x98>)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e18:	e883 0003 	stmia.w	r3, {r0, r1}
										((0x80|WAKE_UP_DUR)<<8),
										((0x80|CTRL10_C)<<8),
										((0x80|MD1_CFG)<<8)};
	uint8_t  shouldbe[4] = {0};											//The actual configuration we write to register
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
	uint8_t actual_16[4] = {0};											//The actual configuration we read from register
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 4; i ++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
 8000e28:	e027      	b.n	8000e7a <TimeStamp_config+0x86>
	{
		spi_write(&timestamp_buffer[i],Port,Pin);
 8000e2a:	f107 021c 	add.w	r2, r7, #28
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fc0f 	bl	800165c <spi_write>
		spi_RX(&timestamp_buffercheck[i], &actual_16[i],Port,Pin);
 8000e3e:	f107 0214 	add.w	r2, r7, #20
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	18d0      	adds	r0, r2, r3
 8000e48:	f107 020c 	add.w	r2, r7, #12
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	18d1      	adds	r1, r2, r3
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	f000 fbda 	bl	800160c <spi_RX>
		shouldbe[i] = timestamp_buffer[i];
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e60:	4413      	add	r3, r2
 8000e62:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000e66:	b2d9      	uxtb	r1, r3
 8000e68:	f107 0210 	add.w	r2, r7, #16
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	4413      	add	r3, r2
 8000e70:	460a      	mov	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i ++)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	3301      	adds	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	ddd4      	ble.n	8000e2a <TimeStamp_config+0x36>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08005cd4 	.word	0x08005cd4
 8000e8c:	08005cdc 	.word	0x08005cdc

08000e90 <INTTrigger>:
//Sync ODR with PWM
void INTTrigger(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
	uint16_t INTTrigger_buffer[2] = {
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <INTTrigger+0x84>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
			(CTRL6_C<<8|ctrl6edge),
			(CTRL4_C<<8|ctrl4)
				};
	uint16_t INTTrigger_checkbuffer[2] = {
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <INTTrigger+0x88>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]
				((READ|CTRL6_C)<<8),
				((READ|CTRL4_C)<<8)
					};
	uint8_t  shouldbe[2] = {0};											//The actual configuration we write to register
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	823b      	strh	r3, [r7, #16]
	uint8_t actual_16[2] = {0};											//The actual configuration we read from register
 8000eac:	2300      	movs	r3, #0
 8000eae:	81bb      	strh	r3, [r7, #12]
	for(int i = 0; i <2;i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	e027      	b.n	8000f06 <INTTrigger+0x76>
	{
		spi_write(&INTTrigger_buffer[i],Port,Pin);
 8000eb6:	f107 0218 	add.w	r2, r7, #24
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fbc9 	bl	800165c <spi_write>
		spi_RX(&INTTrigger_checkbuffer[i], &actual_16[i],Port,Pin);
 8000eca:	f107 0214 	add.w	r2, r7, #20
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	18d0      	adds	r0, r2, r3
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	18d1      	adds	r1, r2, r3
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	f000 fb94 	bl	800160c <spi_RX>
		shouldbe[i] = INTTrigger_buffer[i];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	f107 0220 	add.w	r2, r7, #32
 8000eec:	4413      	add	r3, r2
 8000eee:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000ef2:	b2d9      	uxtb	r1, r3
 8000ef4:	f107 0210 	add.w	r2, r7, #16
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	460a      	mov	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <2;i++)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	3301      	adds	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	ddd4      	ble.n	8000eb6 <INTTrigger+0x26>
	}


}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	08005ce4 	.word	0x08005ce4
 8000f18:	08005ce8 	.word	0x08005ce8

08000f1c <FIFO_config>:



void FIFO_config(GPIO_TypeDef* Port, uint16_t Pin)
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
	uint16_t FIFO_config[9]      =  {(FIFO_CTRL5<<8|fiforeset),
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <FIFO_config+0xa8>)
 8000f2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f2e:	461d      	mov	r5, r3
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	8023      	strh	r3, [r4, #0]
									(FIFO_CTRL3<<8|deccfgno),//deccfg833
									(FIFO_CTRL4<<8|notimestamp),//fifo4cfg),////notimestamp
									(FIFO_CTRL1<<8|0b11111011),
									(FIFO_CTRL2<<8|fifo2cfgNOts),
									(FIFO_CTRL5<<8|fifo16k)};
	uint16_t FIFO_configcheck[9] = {((0x80|FIFO_CTRL5)<<8),
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <FIFO_config+0xac>)
 8000f3a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	8023      	strh	r3, [r4, #0]
									((0x80|FIFO_CTRL3)<<8),
									((0x80|FIFO_CTRL4)<<8),
									((0x80|FIFO_CTRL1)<<8),
									((0x80|FIFO_CTRL2)<<8),
									((0x80|FIFO_CTRL5)<<8)};
	uint8_t  shouldbe[9] = {0}; 									//The actual configuration we write to register
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	721a      	strb	r2, [r3, #8]
	uint8_t actual_16[9] = {0};										//The actual configuration we read from register
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	721a      	strb	r2, [r3, #8]
	for (int i =0; i<9;i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f64:	e027      	b.n	8000fb6 <FIFO_config+0x9a>
	{
		spi_write(&FIFO_config[i],Port,Pin);
 8000f66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	887a      	ldrh	r2, [r7, #2]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fb71 	bl	800165c <spi_write>
		spi_RX(&FIFO_configcheck[i], &actual_16[i],Port,Pin);
 8000f7a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	18d0      	adds	r0, r2, r3
 8000f84:	f107 020c 	add.w	r2, r7, #12
 8000f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f8a:	18d1      	adds	r1, r2, r3
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	f000 fb3c 	bl	800160c <spi_RX>

		shouldbe[i] = FIFO_config[i];
 8000f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000fa2:	b2d9      	uxtb	r1, r3
 8000fa4:	f107 0218 	add.w	r2, r7, #24
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000faa:	4413      	add	r3, r2
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<9;i++)
 8000fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	ddd4      	ble.n	8000f66 <FIFO_config+0x4a>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	; 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc4:	08005cec 	.word	0x08005cec
 8000fc8:	08005d00 	.word	0x08005d00

08000fcc <main>:
volatile int FSM_CHECKED_FLAG = 0;											// Ensure FSM is checked only once per callback
int DP_FLAG = 0;															// Start Data Processing Flag
#endif

int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	f5ad 5dee 	sub.w	sp, sp, #7616	; 0x1dc0
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af02      	add	r7, sp, #8
	HAL_Init();    															// Reset of all peripherals, Initializes the Flash interface and the Systick.
 8000fd6:	f000 fef5 	bl	8001dc4 <HAL_Init>
	SystemClock_Config();    												// Configure the system clock
 8000fda:	f7ff fa7b 	bl	80004d4 <SystemClock_Config>
	MX_GPIO_Init();   														// Initialize all configured peripherals
 8000fde:	f7ff fc1b 	bl	8000818 <MX_GPIO_Init>
	MX_DMA_Init();															// Initialize DMA UART and SPI,placed before protocol configuration
 8000fe2:	f000 fe8d 	bl	8001d00 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8000fe6:	f000 fe37 	bl	8001c58 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000fea:	f000 fe5f 	bl	8001cac <MX_USART2_UART_Init>
	//MX_TIM3_Init();														// PWM timer initialization
	MX_TIM4_Init();															// PWM timer initialization
 8000fee:	f000 fa0b 	bl	8001408 <MX_TIM4_Init>
	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);									// Initialize PWM to be stopped
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4881      	ldr	r0, [pc, #516]	; (80011fc <main+0x230>)
 8000ff6:	f003 f943 	bl	8004280 <HAL_TIM_PWM_Stop>
	MX_SPI1_Init();
 8000ffa:	f000 fa7b 	bl	80014f4 <MX_SPI1_Init>
	struct RxBuffer rawData[nIMUs];											// Input buffer for raw data
	int nFresh[RX_BUFFER_SIZE] = {0};												// Number of IMUs with fresh (untransmitted) data for each buffer index
 8000ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001002:	3b14      	subs	r3, #20
 8001004:	4618      	mov	r0, r3
 8001006:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800100a:	461a      	mov	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f004 fe21 	bl	8005c54 <memset>
	Buffer_Init(rawData);													// Initialize buffer contents to zeros
 8001012:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001016:	3b04      	subs	r3, #4
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc89 	bl	8000930 <Buffer_Init>
	int I[nIMUs] = {0};																// Declaration of buffer indices for each IMU
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	3b0c      	subs	r3, #12
 8001024:	461a      	mov	r2, r3
 8001026:	2300      	movs	r3, #0
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	6053      	str	r3, [r2, #4]
 800102c:	6093      	str	r3, [r2, #8]
 800102e:	60d3      	str	r3, [r2, #12]
 8001030:	6113      	str	r3, [r2, #16]
 8001032:	6153      	str	r3, [r2, #20]
//	Indices_Init(&I);
	int csCount=0;															// csCount is the ID of each IMU
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	3b10      	subs	r3, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
	int fPWMStarted = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	f507 52ee 	add.w	r2, r7, #7616	; 0x1dc0
 8001044:	f102 020c 	add.w	r2, r2, #12
 8001048:	6013      	str	r3, [r2, #0]

	resetAll();																// Reset all IMU
 800104a:	f7ff fd51 	bl	8000af0 <resetAll>
	setupAll();																// IMU configuration
 800104e:	f7ff fd71 	bl	8000b34 <setupAll>
	#ifdef SPIDMA
	MX_SPI1_Init_8BIT();													// Initialize SPI with 8 bit per transmission for burst read
 8001052:	f000 fa87 	bl	8001564 <MX_SPI1_Init_8BIT>
	spi_DMA_RX(FIFO_S2, EDMA,Ports,Pins,2);									// Read FIFO_S2 into EDMA to initialize FSM
 8001056:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <main+0x234>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <main+0x238>)
 800105c:	8819      	ldrh	r1, [r3, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	460b      	mov	r3, r1
 8001064:	4968      	ldr	r1, [pc, #416]	; (8001208 <main+0x23c>)
 8001066:	4869      	ldr	r0, [pc, #420]	; (800120c <main+0x240>)
 8001068:	f000 fab2 	bl	80015d0 <spi_DMA_RX>
	#endif
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);								//PWM(GPIO C6) start, use to synchronize IMUs FIFO rate
//	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15));								//Check if the Board Synchronization pin is pull up(Active high)
	//HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);								//PWM(GPIO B6) start, use to synchronize IMUs FIFO rate

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);									// Turn on red LED
 800106c:	2201      	movs	r2, #1
 800106e:	2104      	movs	r1, #4
 8001070:	4867      	ldr	r0, [pc, #412]	; (8001210 <main+0x244>)
 8001072:	f001 fd77 	bl	8002b64 <HAL_GPIO_WritePin>
		#ifdef SPIDMA
		#ifdef LOCAL_PROCESS_TIMEOUT
		if(HAL_GetTick()<=timeout)
		{
		#endif
			switch(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15))				// Dedicated start/stop pin
 8001076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107a:	4866      	ldr	r0, [pc, #408]	; (8001214 <main+0x248>)
 800107c:	f001 fd5a 	bl	8002b34 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 809f 	beq.w	80011c6 <main+0x1fa>
 8001088:	2b01      	cmp	r3, #1
 800108a:	d1f4      	bne.n	8001076 <main+0xaa>
//			switch(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10))				// USART1 TX as start/stop signal
			{
				case 1:
					if (!fPWMStarted)
 800108c:	f507 53ee 	add.w	r3, r7, #7616	; 0x1dc0
 8001090:	f103 030c 	add.w	r3, r3, #12
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10e      	bne.n	80010b8 <main+0xec>
					{
						HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);						//PWM(GPIO B6) start, use to synchronize IMUs FIFO rate
 800109a:	2100      	movs	r1, #0
 800109c:	4857      	ldr	r0, [pc, #348]	; (80011fc <main+0x230>)
 800109e:	f003 f8bd 	bl	800421c <HAL_TIM_PWM_Start>
						fPWMStarted = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f507 52ee 	add.w	r2, r7, #7616	; 0x1dc0
 80010a8:	f102 020c 	add.w	r2, r2, #12
 80010ac:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);			//Turn on green LED
 80010ae:	2201      	movs	r2, #1
 80010b0:	2102      	movs	r1, #2
 80010b2:	4857      	ldr	r0, [pc, #348]	; (8001210 <main+0x244>)
 80010b4:	f001 fd56 	bl	8002b64 <HAL_GPIO_WritePin>
					}

					if (!FSM_CHECKED_FLAG) DMA_FSM_BURST6(&csCount, rawData, I);			//Option:DMA_FSM_BURST6(&csCount,rawData,&I); DMA_FSM_BURST2(&csCount,rawData,&I)
 80010b8:	4b57      	ldr	r3, [pc, #348]	; (8001218 <main+0x24c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10b      	bne.n	80010d8 <main+0x10c>
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	3a0c      	subs	r2, #12
 80010c6:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 80010ca:	3904      	subs	r1, #4
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	3b10      	subs	r3, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa90 	bl	80005f8 <DMA_FSM_BURST6>
																					//Notice: Make sure to change PWM rate at a right speed when switch to BURST2
																					//Otherwise: program is likely to enter hard fault interrupt because of buffer overflow
					if (DP_FLAG)														//Data retrieval completed (one set)
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <main+0x250>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8089 	beq.w	80011f4 <main+0x228>
					{																//Start to process data
						DP_FLAG = 0;
 80010e2:	4b4e      	ldr	r3, [pc, #312]	; (800121c <main+0x250>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
						nFresh[I[csCount]]++;
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	3b10      	subs	r3, #16
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	3b0c      	subs	r3, #12
 80010f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fe:	3b14      	subs	r3, #20
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800110a:	3b14      	subs	r3, #20
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						if (nFresh[I[csCount]] == nIMUs)							// If all IMUs have fresh data, transmit the data over UART
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	3b10      	subs	r3, #16
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	3b0c      	subs	r3, #12
 800111e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001126:	3b14      	subs	r3, #20
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	2b06      	cmp	r3, #6
 800112e:	d11e      	bne.n	800116e <main+0x1a2>
						{
							SendData(rawData, I[csCount]);
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	3b10      	subs	r3, #16
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	3b0c      	subs	r3, #12
 800113e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001142:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001146:	3b04      	subs	r3, #4
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f86e 	bl	800122c <SendData>
							nFresh[I[csCount]] = 0;									// Mark all data in frame stale
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	3b10      	subs	r3, #16
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	3b0c      	subs	r3, #12
 800115e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001166:	3b14      	subs	r3, #20
 8001168:	2100      	movs	r1, #0
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
						}
						I[csCount] = I[csCount] < RX_BUFFER_SIZE - 1? I[csCount]+1 : 0;	// Increment buffer index
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	3b10      	subs	r3, #16
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	3b0c      	subs	r3, #12
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	2b62      	cmp	r3, #98	; 0x62
 8001182:	dc0a      	bgt.n	800119a <main+0x1ce>
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	3b10      	subs	r3, #16
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	3b0c      	subs	r3, #12
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	e000      	b.n	800119c <main+0x1d0>
 800119a:	2200      	movs	r2, #0
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	3b10      	subs	r3, #16
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	3b0c      	subs	r3, #12
 80011aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						c[csCount]++;												//Count number of IMU being read
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	3b10      	subs	r3, #16
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <main+0x254>)
 80011b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011bc:	3201      	adds	r2, #1
 80011be:	4918      	ldr	r1, [pc, #96]	; (8001220 <main+0x254>)
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//						else
//						{
//							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET );
//						}
//					}
					break;
 80011c4:	e016      	b.n	80011f4 <main+0x228>
				case 0:
					if (fPWMStarted)
 80011c6:	f507 53ee 	add.w	r3, r7, #7616	; 0x1dc0
 80011ca:	f103 030c 	add.w	r3, r3, #12
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d011      	beq.n	80011f8 <main+0x22c>
					{
						HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <main+0x230>)
 80011d8:	f003 f852 	bl	8004280 <HAL_TIM_PWM_Stop>
						fPWMStarted = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f507 52ee 	add.w	r2, r7, #7616	; 0x1dc0
 80011e2:	f102 020c 	add.w	r2, r2, #12
 80011e6:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET );		// Turn off green LED
 80011e8:	2200      	movs	r2, #0
 80011ea:	2102      	movs	r1, #2
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <main+0x244>)
 80011ee:	f001 fcb9 	bl	8002b64 <HAL_GPIO_WritePin>
					}
					break;
 80011f2:	e001      	b.n	80011f8 <main+0x22c>
					break;
 80011f4:	bf00      	nop
 80011f6:	e73e      	b.n	8001076 <main+0xaa>
					break;
 80011f8:	bf00      	nop
			switch(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15))				// Dedicated start/stop pin
 80011fa:	e73c      	b.n	8001076 <main+0xaa>
 80011fc:	20000094 	.word	0x20000094
 8001200:	2000008c 	.word	0x2000008c
 8001204:	20000090 	.word	0x20000090
 8001208:	20000074 	.word	0x20000074
 800120c:	20000010 	.word	0x20000010
 8001210:	40020400 	.word	0x40020400
 8001214:	40020000 	.word	0x40020000
 8001218:	20000078 	.word	0x20000078
 800121c:	2000007c 	.word	0x2000007c
 8001220:	2000005c 	.word	0x2000005c

08001224 <Error_Handler>:




void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	while(1);
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x4>
	...

0800122c <SendData>:
int iTx_bytesBuffer = 0;
int iTx_bytesBufferRollover = 0;
int nUARTCplt = 0;

void SendData(struct RxBuffer *rawData, int index)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	tx_bytes[0].t = 0;
 8001236:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <SendData+0x194>)
 8001238:	2200      	movs	r2, #0
 800123a:	801a      	strh	r2, [r3, #0]
	for (int k = 0; k < nIMUs; k++)
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e07d      	b.n	800133e <SendData+0x112>
	{
		tx_bytes[k*6 + 1].t = (int16_t)rawData[k].RxBuffer_OMX[index];
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	18d1      	adds	r1, r2, r3
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	3301      	adds	r3, #1
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <SendData+0x194>)
 8001264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tx_bytes[k*6 + 2].t = (int16_t)rawData[k].RxBuffer_OMY[index];
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	18d1      	adds	r1, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	3302      	adds	r3, #2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	3264      	adds	r2, #100	; 0x64
 8001286:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800128a:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <SendData+0x194>)
 800128c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tx_bytes[k*6 + 3].t = (int16_t)rawData[k].RxBuffer_OMZ[index];
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	18d1      	adds	r1, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3303      	adds	r3, #3
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	32c8      	adds	r2, #200	; 0xc8
 80012ae:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80012b2:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <SendData+0x194>)
 80012b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tx_bytes[k*6 + 4].t = (int16_t)rawData[k].RxBuffer_AX[index];
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	3304      	adds	r3, #4
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80012d8:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <SendData+0x194>)
 80012de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tx_bytes[k*6 + 5].t = (int16_t)rawData[k].RxBuffer_AY[index];
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	18d1      	adds	r1, r2, r3
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	3305      	adds	r3, #5
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	f502 72c8 	add.w	r2, r2, #400	; 0x190
 8001302:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001306:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <SendData+0x194>)
 8001308:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		tx_bytes[k*6 + 6].t = (int16_t)rawData[k].RxBuffer_AZ[index];
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	18d1      	adds	r1, r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	461a      	mov	r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800132e:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SendData+0x194>)
 8001334:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int k = 0; k < nIMUs; k++)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3301      	adds	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b05      	cmp	r3, #5
 8001342:	f77f af7e 	ble.w	8001242 <SendData+0x16>
	}

	//UART
	HAL_UART_DMAResume(&huart1);								//Start UART
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <SendData+0x198>)
 8001348:	f003 fdbc 	bl	8004ec4 <HAL_UART_DMAResume>
	HAL_UART_Transmit_DMA(&huart1, tx_bytes[0].tbytes, NBYTES);			//Transmit bytes with DMA
 800134c:	224a      	movs	r2, #74	; 0x4a
 800134e:	491c      	ldr	r1, [pc, #112]	; (80013c0 <SendData+0x194>)
 8001350:	481c      	ldr	r0, [pc, #112]	; (80013c4 <SendData+0x198>)
 8001352:	f003 fce7 	bl	8004d24 <HAL_UART_Transmit_DMA>

	for (int i = 1; i <= NWORDS; i++)
 8001356:	2301      	movs	r3, #1
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	e012      	b.n	8001382 <SendData+0x156>
	{
		tx_bytesBuffer[iTx_bytesBuffer][i - 1] = tx_bytes[i];
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <SendData+0x19c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1e59      	subs	r1, r3, #1
 8001364:	4819      	ldr	r0, [pc, #100]	; (80013cc <SendData+0x1a0>)
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	4913      	ldr	r1, [pc, #76]	; (80013c0 <SendData+0x194>)
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001378:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for (int i = 1; i <= NWORDS; i++)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b24      	cmp	r3, #36	; 0x24
 8001386:	dde9      	ble.n	800135c <SendData+0x130>
	}
	if (iTx_bytesBuffer >= 99)
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <SendData+0x19c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b62      	cmp	r3, #98	; 0x62
 800138e:	dd08      	ble.n	80013a2 <SendData+0x176>
	{
		iTx_bytesBuffer = 0;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <SendData+0x19c>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
		iTx_bytesBufferRollover++;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <SendData+0x1a4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <SendData+0x1a4>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e004      	b.n	80013ac <SendData+0x180>
	}
	else
	{
		iTx_bytesBuffer++;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <SendData+0x19c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <SendData+0x19c>)
 80013aa:	6013      	str	r3, [r2, #0]
	}
	if (iTx_bytesBuffer > 1)
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <SendData+0x19c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	dd00      	ble.n	80013b6 <SendData+0x18a>
	{
		__NOP();
 80013b4:	bf00      	nop
	}
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000036c 	.word	0x2000036c
 80013c4:	200001d4 	.word	0x200001d4
 80013c8:	20000080 	.word	0x20000080
 80013cc:	200003b8 	.word	0x200003b8
 80013d0:	20000084 	.word	0x20000084

080013d4 <HAL_UART_TxCpltCallback>:

// UART DMA handler
// Being call after done with the transmission
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(&huart1);									  //Pause UART
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <HAL_UART_TxCpltCallback+0x2c>)
 80013de:	f003 fd0d 	bl	8004dfc <HAL_UART_DMAPause>
	nUARTCplt++;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_UART_TxCpltCallback+0x30>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_UART_TxCpltCallback+0x30>)
 80013ea:	6013      	str	r3, [r2, #0]
	if (nUARTCplt > 99)
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_UART_TxCpltCallback+0x30>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b63      	cmp	r3, #99	; 0x63
 80013f2:	dd00      	ble.n	80013f6 <HAL_UART_TxCpltCallback+0x22>
	{
		__NOP();
 80013f4:	bf00      	nop
	}
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001d4 	.word	0x200001d4
 8001404:	20000088 	.word	0x20000088

08001408 <MX_TIM4_Init>:
//PWM configuration (stm32f4xx_hal_msp.c defines Port and Pin)
//Variable for changing PWM frequency
//GPIO B6
//1.Prescaler 2.Period 3.Pulse
void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]
  htim4.Instance = TIM4;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM4_Init+0xe4>)
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_TIM4_Init+0xe8>)
 800143c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 52499;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001440:	f64c 5213 	movw	r2, #52499	; 0xcd13
 8001444:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <MX_TIM4_Init+0xe4>)
 800144e:	2201      	movs	r2, #1
 8001450:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MX_TIM4_Init+0xe4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_TIM4_Init+0xe4>)
 8001460:	f002 fe7c 	bl	800415c <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800146a:	f7ff fedb 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	4619      	mov	r1, r3
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_TIM4_Init+0xe4>)
 800147c:	f003 f812 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001486:	f7ff fecd 	bl	8001224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_TIM4_Init+0xe4>)
 800148c:	f002 fe91 	bl	80041b2 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001496:	f7ff fec5 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4619      	mov	r1, r3
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014aa:	f003 fb7f 	bl	8004bac <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014b4:	f7ff feb6 	bl	8001224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	; 0x60
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014c4:	2304      	movs	r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014d0:	f002 ff22 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014da:	f7ff fea3 	bl	8001224 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM4_Init+0xe4>)
 80014e0:	f000 f942 	bl	8001768 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000094 	.word	0x20000094
 80014f0:	40000800 	.word	0x40000800

080014f4 <MX_SPI1_Init>:
   *PA5     ------> SPI1_SCK
   *PA6     ------> SPI1_MISO
   *PA7     ------> SPI1_MOSI
   */
void MX_SPI1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_SPI1_Init+0x68>)
 80014fa:	4a19      	ldr	r2, [pc, #100]	; (8001560 <MX_SPI1_Init+0x6c>)
 80014fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_SPI1_Init+0x68>)
 8001500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_SPI1_Init+0x68>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;							//SPI Mode 3 configuration
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <MX_SPI1_Init+0x68>)
 800150e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001512:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;						//SPI Mode 3 configuration
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0x68>)
 8001516:	2202      	movs	r2, #2
 8001518:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;							//SPI Mode 3 configuration
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_SPI1_Init+0x68>)
 800151c:	2201      	movs	r2, #1
 800151e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI1_Init+0x68>)
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;			//SPI clock rate: system clock/pre-scaler
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI1_Init+0x68>)
 800152a:	2218      	movs	r2, #24
 800152c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_SPI1_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI1_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MX_SPI1_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI1_Init+0x68>)
 8001542:	220a      	movs	r2, #10
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_SPI1_Init+0x68>)
 8001548:	f001 ff88 	bl	800345c <HAL_SPI_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001552:	f7ff fe67 	bl	8001224 <Error_Handler>
  }
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000214 	.word	0x20000214
 8001560:	40013000 	.word	0x40013000

08001564 <MX_SPI1_Init_8BIT>:

void MX_SPI1_Init_8BIT(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <MX_SPI1_Init_8BIT+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 8001570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;						//SPI Mode 3 configuration for LSM6DSL SPI requirement
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 8001584:	2202      	movs	r2, #2
 8001586:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;							//SPI Mode 3 configuration for LSM6DSL SPI requirement
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 800158a:	2201      	movs	r2, #1
 800158c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;			//SPI clock rate: system clock/pre-scaler
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 8001598:	2218      	movs	r2, #24
 800159a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 80015b0:	220a      	movs	r2, #10
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_SPI1_Init_8BIT+0x64>)
 80015b6:	f001 ff51 	bl	800345c <HAL_SPI_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_SPI1_Init_8BIT+0x60>
  {
    Error_Handler();
 80015c0:	f7ff fe30 	bl	8001224 <Error_Handler>
  }
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000214 	.word	0x20000214
 80015cc:	40013000 	.word	0x40013000

080015d0 <spi_DMA_RX>:

//SPI DMA function
//Input : tx/rx data address, Port and Pin for CS and byte to transmit and receive
//Output: None
void spi_DMA_RX(uint8_t *txdata, uint8_t *rxdata,GPIO_TypeDef* Port, uint16_t Pin, int byteNumber)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	807b      	strh	r3, [r7, #2]
	 HAL_SPI_DMAResume(&hspi1);
 80015de:	480a      	ldr	r0, [pc, #40]	; (8001608 <spi_DMA_RX+0x38>)
 80015e0:	f002 fb9a 	bl	8003d18 <HAL_SPI_DMAResume>
	 HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET );
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 faba 	bl	8002b64 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive_DMA( &hspi1, txdata, (uint8_t*)rxdata, byteNumber);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <spi_DMA_RX+0x38>)
 80015fa:	f002 fa69 	bl	8003ad0 <HAL_SPI_TransmitReceive_DMA>
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000214 	.word	0x20000214

0800160c <spi_RX>:

//SPI polling code, one byte per transmission
//Better use with 16 bits clock cycle confirguation
void spi_RX(uint16_t *txdata, uint8_t *rxdata,GPIO_TypeDef* Port, uint16_t Pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	807b      	strh	r3, [r7, #2]
	 HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET );
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f001 fa9f 	bl	8002b64 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive( &hspi1, (uint8_t*)txdata, rxdata, 1, 100);
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <spi_RX+0x4c>)
 8001632:	f002 f8ab 	bl	800378c <HAL_SPI_TransmitReceive>
	 while( hspi1.State == HAL_SPI_STATE_BUSY );
 8001636:	bf00      	nop
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <spi_RX+0x4c>)
 800163a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d0f9      	beq.n	8001638 <spi_RX+0x2c>
	 HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET );
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f001 fa8a 	bl	8002b64 <HAL_GPIO_WritePin>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000214 	.word	0x20000214

0800165c <spi_write>:

//SPI write without reading it back
//Use in configuration
void spi_write(uint16_t *txadddata, GPIO_TypeDef* Port, uint16_t Pin)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	80fb      	strh	r3, [r7, #6]
	 HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET );
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f001 fa77 	bl	8002b64 <HAL_GPIO_WritePin>
	 HAL_SPI_Transmit( &hspi1, (uint8_t*)txadddata, 1, 100);
 8001676:	2364      	movs	r3, #100	; 0x64
 8001678:	2201      	movs	r2, #1
 800167a:	68f9      	ldr	r1, [r7, #12]
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <spi_write+0x48>)
 800167e:	f001 ff51 	bl	8003524 <HAL_SPI_Transmit>
	 while( hspi1.State == HAL_SPI_STATE_BUSY );
 8001682:	bf00      	nop
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <spi_write+0x48>)
 8001686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d0f9      	beq.n	8001684 <spi_write+0x28>
	 HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET );
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f001 fa64 	bl	8002b64 <HAL_GPIO_WritePin>
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000214 	.word	0x20000214

080016a8 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_usart1_rx;
extern DMA_HandleTypeDef hdma_spi1_rx;
extern DMA_HandleTypeDef hdma_spi1_tx;

void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 fcd0 	bl	800208c <HAL_NVIC_SetPriorityGrouping>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_TIM_Base_MspInit+0x64>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10e      	bne.n	8001728 <HAL_TIM_Base_MspInit+0x30>
  {
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  else if(htim_base->Instance==TIM4)
  {
    __HAL_RCC_TIM4_CLK_ENABLE();
  }

}
 8001726:	e012      	b.n	800174e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_TIM_Base_MspInit+0x6c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10d      	bne.n	800174e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40000400 	.word	0x40000400
 8001760:	40023800 	.word	0x40023800
 8001764:	40000800 	.word	0x40000800

08001768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_TIM_MspPostInit+0xb0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d11e      	bne.n	80017c8 <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017b6:	2302      	movs	r3, #2
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4817      	ldr	r0, [pc, #92]	; (8001820 <HAL_TIM_MspPostInit+0xb8>)
 80017c2:	f001 f835 	bl	8002830 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  }

}
 80017c6:	e022      	b.n	800180e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <HAL_TIM_MspPostInit+0xbc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d11d      	bne.n	800180e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_TIM_MspPostInit+0xb4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ee:	2340      	movs	r3, #64	; 0x40
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017fe:	2302      	movs	r3, #2
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <HAL_TIM_MspPostInit+0xc0>)
 800180a:	f001 f811 	bl	8002830 <HAL_GPIO_Init>
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40000400 	.word	0x40000400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020800 	.word	0x40020800
 8001824:	40000800 	.word	0x40000800
 8001828:	40020400 	.word	0x40020400

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_UART_MspInit+0x1b8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	f040 8094 	bne.w	8001978 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6453      	str	r3, [r2, #68]	; 0x44
 8001860:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	4b5d      	ldr	r3, [pc, #372]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a5c      	ldr	r2, [pc, #368]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001888:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800189a:	2307      	movs	r3, #7
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4851      	ldr	r0, [pc, #324]	; (80019ec <HAL_UART_MspInit+0x1c0>)
 80018a6:	f000 ffc3 	bl	8002830 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018ac:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_UART_MspInit+0x1c8>)
 80018ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80018b0:	4b4f      	ldr	r3, [pc, #316]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018c4:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018de:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018ec:	4840      	ldr	r0, [pc, #256]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 80018ee:	f000 fc0f 	bl	8002110 <HAL_DMA_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80018f8:	f7ff fc94 	bl	8001224 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
 8001902:	4a3b      	ldr	r2, [pc, #236]	; (80019f0 <HAL_UART_MspInit+0x1c4>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 800190a:	4a3c      	ldr	r2, [pc, #240]	; (80019fc <HAL_UART_MspInit+0x1d0>)
 800190c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001914:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR; ///
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800194a:	482b      	ldr	r0, [pc, #172]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 800194c:	f000 fbe0 	bl	8002110 <HAL_DMA_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001956:	f7ff fc65 	bl	8001224 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
 8001960:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_UART_MspInit+0x1cc>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2025      	movs	r0, #37	; 0x25
 800196c:	f000 fb99 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001970:	2025      	movs	r0, #37	; 0x25
 8001972:	f000 fbb2 	bl	80020da <HAL_NVIC_EnableIRQ>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  }

}
 8001976:	e030      	b.n	80019da <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_UART_MspInit+0x1d4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_UART_MspInit+0x1bc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ba:	230c      	movs	r3, #12
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_UART_MspInit+0x1c0>)
 80019d6:	f000 ff2b 	bl	8002830 <HAL_GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	20000114 	.word	0x20000114
 80019f4:	400264b8 	.word	0x400264b8
 80019f8:	20000174 	.word	0x20000174
 80019fc:	40026440 	.word	0x40026440
 8001a00:	40004400 	.word	0x40004400

08001a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_SPI_MspInit+0x148>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f040 808e 	bne.w	8001b44 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	4a47      	ldr	r2, [pc, #284]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a36:	6453      	str	r3, [r2, #68]	; 0x44
 8001a38:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a40      	ldr	r2, [pc, #256]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b3e      	ldr	r3, [pc, #248]	; (8001b50 <HAL_SPI_MspInit+0x14c>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a60:	23f0      	movs	r3, #240	; 0xf0
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a70:	2305      	movs	r3, #5
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4836      	ldr	r0, [pc, #216]	; (8001b54 <HAL_SPI_MspInit+0x150>)
 8001a7c:	f000 fed8 	bl	8002830 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001a82:	4a36      	ldr	r2, [pc, #216]	; (8001b5c <HAL_SPI_MspInit+0x158>)
 8001a84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001a88:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a8c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a9a:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001aba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001abe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac0:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001ac6:	4824      	ldr	r0, [pc, #144]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001ac8:	f000 fb22 	bl	8002110 <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 8001ad2:	f7ff fba7 	bl	8001224 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001ada:	64da      	str	r2, [r3, #76]	; 0x4c
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_SPI_MspInit+0x154>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_SPI_MspInit+0x160>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001aea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b12:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b20:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b2a:	f000 faf1 	bl	8002110 <HAL_DMA_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_SPI_MspInit+0x134>
    {
      Error_Handler();
 8001b34:	f7ff fb76 	bl	8001224 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b3c:	649a      	str	r2, [r3, #72]	; 0x48
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_SPI_MspInit+0x15c>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6393      	str	r3, [r2, #56]	; 0x38

  }

}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40013000 	.word	0x40013000
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	200002ac 	.word	0x200002ac
 8001b5c:	40026410 	.word	0x40026410
 8001b60:	2000030c 	.word	0x2000030c
 8001b64:	40026458 	.word	0x40026458

08001b68 <NMI_Handler>:
extern DMA_HandleTypeDef hdma_spi1_rx;
extern DMA_HandleTypeDef hdma_spi1_tx;
extern UART_HandleTypeDef huart1;

void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	__NOP();
 8001b6c:	bf00      	nop
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <HardFault_Handler+0x4>

08001b7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <UsageFault_Handler+0x4>

08001b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001bbe:	f000 f953 	bl	8001e68 <HAL_IncTick>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <USART1_IRQHandler+0x10>)
 8001bce:	f003 f9cb 	bl	8004f68 <HAL_UART_IRQHandler>
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200001d4 	.word	0x200001d4

08001bdc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA2_Stream2_IRQHandler+0x10>)
 8001be2:	f000 fbbd 	bl	8002360 <HAL_DMA_IRQHandler>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000174 	.word	0x20000174

08001bf0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA2_Stream7_IRQHandler+0x10>)
 8001bf6:	f000 fbb3 	bl	8002360 <HAL_DMA_IRQHandler>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000114 	.word	0x20000114

08001c04 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA2_Stream0_IRQHandler+0x10>)
 8001c0a:	f000 fba9 	bl	8002360 <HAL_DMA_IRQHandler>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200002ac 	.word	0x200002ac

08001c18 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA2_Stream3_IRQHandler+0x10>)
 8001c1e:	f000 fb9f 	bl	8002360 <HAL_DMA_IRQHandler>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000030c 	.word	0x2000030c

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <SystemInit+0x28>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <SystemInit+0x28>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SystemInit+0x28>)
 8001c42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c46:	609a      	str	r2, [r3, #8]
#endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <MX_USART1_UART_Init>:
 *PA10    ------> USART1_RX
 *UART1 is connected to the Hirose Connector in PCB
*/

void MX_USART1_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c5e:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <MX_USART1_UART_Init+0x4c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c64:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <MX_USART1_UART_Init+0x50>)
 8001c66:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c7c:	220c      	movs	r2, #12
 8001c7e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_USART1_UART_Init+0x48>)
 8001c8e:	f002 fffb 	bl	8004c88 <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001c98:	f7ff fac4 	bl	8001224 <Error_Handler>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200001d4 	.word	0x200001d4
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	000f4240 	.word	0x000f4240

08001cac <MX_USART2_UART_Init>:
 *PA2     ------> USART2_TX
 *PA3     ------> USART2_RX
 *UART2 is connected to USB in STM32
*/
void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART2_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f002 ffd0 	bl	8004c88 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7ff fa99 	bl	8001224 <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000026c 	.word	0x2000026c
 8001cfc:	40004400 	.word	0x40004400

08001d00 <MX_DMA_Init>:

/*
 * Enable DMA controller clock
 */
void MX_DMA_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  // DMA controller clock enable
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MX_DMA_Init+0x6c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <MX_DMA_Init+0x6c>)
 8001d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_DMA_Init+0x6c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  /* UART DMA
     DMA interrupt init
     DMA2_Stream2_IRQn interrupt configuration
     DMA2_Stream7_IRQn interrupt configuration
   */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	203a      	movs	r0, #58	; 0x3a
 8001d28:	f000 f9bb 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d2c:	203a      	movs	r0, #58	; 0x3a
 8001d2e:	f000 f9d4 	bl	80020da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2046      	movs	r0, #70	; 0x46
 8001d38:	f000 f9b3 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d3c:	2046      	movs	r0, #70	; 0x46
 8001d3e:	f000 f9cc 	bl	80020da <HAL_NVIC_EnableIRQ>
  /*SPI DMA
    DMA interrupt init
    DMA2_Stream0_IRQn interrupt configuration
    DMA2_Stream3_IRQn interrupt configuration
   */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2038      	movs	r0, #56	; 0x38
 8001d48:	f000 f9ab 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d4c:	2038      	movs	r0, #56	; 0x38
 8001d4e:	f000 f9c4 	bl	80020da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	203b      	movs	r0, #59	; 0x3b
 8001d58:	f000 f9a3 	bl	80020a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001d5c:	203b      	movs	r0, #59	; 0x3b
 8001d5e:	f000 f9bc 	bl	80020da <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d76:	e003      	b.n	8001d80 <LoopCopyDataInit>

08001d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d7e:	3104      	adds	r1, #4

08001d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d88:	d3f6      	bcc.n	8001d78 <CopyDataInit>
  ldr  r2, =_sbss
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d8c:	e002      	b.n	8001d94 <LoopFillZerobss>

08001d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d90:	f842 3b04 	str.w	r3, [r2], #4

08001d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d98:	d3f9      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d9a:	f7ff ff47 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 ff35 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da2:	f7ff f913 	bl	8000fcc <main>
  bx  lr    
 8001da6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001da8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001dac:	08005d44 	.word	0x08005d44
  ldr  r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001db4:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001db8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001dbc:	20001fdc 	.word	0x20001fdc

08001dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <HAL_Init+0x40>)
 8001dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_Init+0x40>)
 8001dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_Init+0x40>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f94d 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f808 	bl	8001e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df8:	f7ff fc56 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023c00 	.word	0x40023c00

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_InitTick+0x54>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x58>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f965 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00e      	b.n	8001e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b0f      	cmp	r3, #15
 8001e3a:	d80a      	bhi.n	8001e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f000 f92d 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_InitTick+0x5c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	2000001c 	.word	0x2000001c
 8001e64:	20000018 	.word	0x20000018

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x20>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x24>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_IncTick+0x24>)
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	20001fd8 	.word	0x20001fd8

08001e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_GetTick+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20001fd8 	.word	0x20001fd8

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff ffee 	bl	8001e90 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_Delay+0x40>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffde 	bl	8001e90 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000001c 	.word	0x2000001c

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff feb8 	bl	8001e90 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e099      	b.n	8002260 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214c:	e00f      	b.n	800216e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214e:	f7ff fe9f 	bl	8001e90 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b05      	cmp	r3, #5
 800215a:	d908      	bls.n	800216e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e078      	b.n	8002260 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e8      	bne.n	800214e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <HAL_DMA_Init+0x158>)
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d107      	bne.n	80021d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4313      	orrs	r3, r2
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0307 	bic.w	r3, r3, #7
 80021ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d117      	bne.n	8002232 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fa91 	bl	800273c <DMA_CheckFifoParam>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800222e:	2301      	movs	r3, #1
 8002230:	e016      	b.n	8002260 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fa48 	bl	80026d0 <DMA_CalcBaseAndBitshift>
 8002240:	4603      	mov	r3, r0
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	223f      	movs	r2, #63	; 0x3f
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	f010803f 	.word	0xf010803f

0800226c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Start_IT+0x26>
 800228e:	2302      	movs	r3, #2
 8002290:	e040      	b.n	8002314 <HAL_DMA_Start_IT+0xa8>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12f      	bne.n	8002306 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f9da 	bl	8002674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	223f      	movs	r2, #63	; 0x3f
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0216 	orr.w	r2, r2, #22
 80022da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e005      	b.n	8002312 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d004      	beq.n	800233a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e00c      	b.n	8002354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2205      	movs	r2, #5
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_DMA_IRQHandler+0x258>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_DMA_IRQHandler+0x25c>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2208      	movs	r2, #8
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0204 	bic.w	r2, r2, #4
 80023b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	2208      	movs	r2, #8
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c4:	f043 0201 	orr.w	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2201      	movs	r2, #1
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2201      	movs	r2, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0202 	orr.w	r2, r3, #2
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2204      	movs	r2, #4
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d012      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2204      	movs	r2, #4
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0204 	orr.w	r2, r3, #4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2210      	movs	r2, #16
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d043      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03c      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2210      	movs	r2, #16
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d024      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
 800248e:	e01f      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e016      	b.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0208 	bic.w	r2, r2, #8
 80024be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2220      	movs	r2, #32
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 808e 	beq.w	80025fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8086 	beq.w	80025fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2220      	movs	r2, #32
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d136      	bne.n	8002578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0216 	bic.w	r2, r2, #22
 8002518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_DMA_IRQHandler+0x1da>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0208 	bic.w	r2, r2, #8
 8002548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	223f      	movs	r2, #63	; 0x3f
 8002550:	409a      	lsls	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	2b00      	cmp	r3, #0
 800256c:	d07d      	beq.n	800266a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
        }
        return;
 8002576:	e078      	b.n	800266a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d01c      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d108      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	2b00      	cmp	r3, #0
 800259a:	d030      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e02b      	b.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d027      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e022      	b.n	80025fe <HAL_DMA_IRQHandler+0x29e>
 80025b8:	20000014 	.word	0x20000014
 80025bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2b00      	cmp	r3, #0
 8002604:	d032      	beq.n	800266c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d022      	beq.n	8002658 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2205      	movs	r2, #5
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	3301      	adds	r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	429a      	cmp	r2, r3
 8002634:	d307      	bcc.n	8002646 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f2      	bne.n	800262a <HAL_DMA_IRQHandler+0x2ca>
 8002644:	e000      	b.n	8002648 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002646:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e000      	b.n	800266c <HAL_DMA_IRQHandler+0x30c>
        return;
 800266a:	bf00      	nop
    }
  }
}
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop

08002674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d108      	bne.n	80026b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026b2:	e007      	b.n	80026c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	60da      	str	r2, [r3, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3b10      	subs	r3, #16
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <DMA_CalcBaseAndBitshift+0x64>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <DMA_CalcBaseAndBitshift+0x68>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d909      	bls.n	8002712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	; 0x58
 8002710:	e007      	b.n	8002722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	aaaaaaab 	.word	0xaaaaaaab
 8002738:	08005d2c 	.word	0x08005d2c

0800273c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d855      	bhi.n	8002808 <DMA_CheckFifoParam+0xcc>
 800275c:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <DMA_CheckFifoParam+0x28>)
 800275e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002762:	bf00      	nop
 8002764:	08002775 	.word	0x08002775
 8002768:	08002787 	.word	0x08002787
 800276c:	08002775 	.word	0x08002775
 8002770:	08002809 	.word	0x08002809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d045      	beq.n	800280c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002784:	e042      	b.n	800280c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800278e:	d13f      	bne.n	8002810 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002794:	e03c      	b.n	8002810 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	d121      	bne.n	80027e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d836      	bhi.n	8002814 <DMA_CheckFifoParam+0xd8>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <DMA_CheckFifoParam+0x70>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027c3 	.word	0x080027c3
 80027b4:	080027bd 	.word	0x080027bd
 80027b8:	080027d5 	.word	0x080027d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      break;
 80027c0:	e02f      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d024      	beq.n	8002818 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e021      	b.n	8002818 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027dc:	d11e      	bne.n	800281c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027e2:	e01b      	b.n	800281c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d902      	bls.n	80027f0 <DMA_CheckFifoParam+0xb4>
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d003      	beq.n	80027f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ee:	e018      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e015      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
      break;
 8002806:	e00b      	b.n	8002820 <DMA_CheckFifoParam+0xe4>
      break;
 8002808:	bf00      	nop
 800280a:	e00a      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
 800280e:	e008      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002810:	bf00      	nop
 8002812:	e006      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002814:	bf00      	nop
 8002816:	e004      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002818:	bf00      	nop
 800281a:	e002      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;   
 800281c:	bf00      	nop
 800281e:	e000      	b.n	8002822 <DMA_CheckFifoParam+0xe6>
      break;
 8002820:	bf00      	nop
    }
  } 
  
  return status; 
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	e159      	b.n	8002b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800284c:	2201      	movs	r2, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	f040 8148 	bne.w	8002afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d00b      	beq.n	800288a <HAL_GPIO_Init+0x5a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287e:	2b11      	cmp	r3, #17
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b12      	cmp	r3, #18
 8002888:	d130      	bne.n	80028ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0201 	and.w	r2, r3, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0xfc>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b12      	cmp	r3, #18
 800292a:	d123      	bne.n	8002974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	08da      	lsrs	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3208      	adds	r2, #8
 800296e:	69b9      	ldr	r1, [r7, #24]
 8002970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0203 	and.w	r2, r3, #3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a2 	beq.w	8002afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b56      	ldr	r3, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x2e4>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a55      	ldr	r2, [pc, #340]	; (8002b14 <HAL_GPIO_Init+0x2e4>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_GPIO_Init+0x2e4>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_GPIO_Init+0x2e8>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_GPIO_Init+0x202>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a47      	ldr	r2, [pc, #284]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x1fe>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <HAL_GPIO_Init+0x2f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x1fa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_GPIO_Init+0x2f8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x1f6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a44      	ldr	r2, [pc, #272]	; (8002b2c <HAL_GPIO_Init+0x2fc>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x1f2>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x204>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x2e8>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a76:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa0:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_GPIO_Init+0x300>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f aea2 	bls.w	800284c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3724      	adds	r7, #36	; 0x24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e25b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d075      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	4ba3      	ldr	r3, [pc, #652]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d112      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b99      	ldr	r3, [pc, #612]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05b      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x108>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e236      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x74>
 8002bfe:	4b91      	ldr	r3, [pc, #580]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a90      	ldr	r2, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x98>
 8002c16:	4b8b      	ldr	r3, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a8a      	ldr	r2, [pc, #552]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xb0>
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a83      	ldr	r2, [pc, #524]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b81      	ldr	r3, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a80      	ldr	r2, [pc, #512]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff f91e 	bl	8001e90 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff f91a 	bl	8001e90 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1fb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xc0>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff f90a 	bl	8001e90 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff f906 	bl	8001e90 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1e7      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0xe8>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1bb      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4952      	ldr	r1, [pc, #328]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0e:	f7ff f8bf 	bl	8001e90 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d16:	f7ff f8bb 	bl	8001e90 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e19c      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4940      	ldr	r1, [pc, #256]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_OscConfig+0x2b0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7ff f89e 	bl	8001e90 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff f89a 	bl	8001e90 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e17b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d030      	beq.n	8002de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7ff f87e 	bl	8001e90 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff f87a 	bl	8001e90 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e15b      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x200>
 8002db6:	e015      	b.n	8002de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <HAL_RCC_OscConfig+0x2b4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff f867 	bl	8001e90 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff f863 	bl	8001e90 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e144      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a0 	beq.w	8002f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d121      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <HAL_RCC_OscConfig+0x2b8>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f829 	bl	8001e90 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	e011      	b.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
 8002e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e54:	f7ff f81c 	bl	8001e90 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0fd      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4d4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d106      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2f0>
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e01c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCC_OscConfig+0x312>
 8002e90:	4b77      	ldr	r3, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a76      	ldr	r2, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x32a>
 8002eaa:	4b71      	ldr	r3, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a70      	ldr	r2, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0301 	bic.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	4b6e      	ldr	r3, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a6d      	ldr	r2, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 0304 	bic.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe ffe1 	bl	8001e90 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe ffdd 	bl	8001e90 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0bc      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x33a>
 8002ef4:	e014      	b.n	8002f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe ffcb 	bl	8001e90 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe ffc7 	bl	8001e90 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0a6      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ee      	bne.n	8002efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8092 	beq.w	8003060 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d05c      	beq.n	8003002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d141      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe ff9b 	bl	8001e90 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fe ff97 	bl	8001e90 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e078      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe ff70 	bl	8001e90 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe ff6c 	bl	8001e90 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04d      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc6:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x41c>
 8002fd2:	e045      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x4dc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fda:	f7fe ff59 	bl	8001e90 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe ff55 	bl	8001e90 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e036      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x44a>
 8003000:	e02e      	b.n	8003060 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e029      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_OscConfig+0x4d8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d115      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d10d      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40007000 	.word	0x40007000
 8003070:	40023800 	.word	0x40023800
 8003074:	42470060 	.word	0x42470060

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fe92 	bl	8001e90 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fe8e 	bl	8001e90 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4601      	mov	r1, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	fa21 f303 	lsr.w	r3, r1, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fdf2 	bl	8001e08 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	08005d14 	.word	0x08005d14
 800323c:	20000014 	.word	0x20000014
 8003240:	20000018 	.word	0x20000018

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325a:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b04      	cmp	r3, #4
 8003264:	d007      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x32>
 8003266:	2b08      	cmp	r3, #8
 8003268:	d008      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x38>
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80b4 	bne.w	80033d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003272:	60bb      	str	r3, [r7, #8]
       break;
 8003274:	e0b3      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003278:	60bb      	str	r3, [r7, #8]
      break;
 800327a:	e0b0      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04a      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	ea03 0501 	and.w	r5, r3, r1
 80032a8:	ea04 0602 	and.w	r6, r4, r2
 80032ac:	4629      	mov	r1, r5
 80032ae:	4632      	mov	r2, r6
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	f04f 0400 	mov.w	r4, #0
 80032b8:	0154      	lsls	r4, r2, #5
 80032ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032be:	014b      	lsls	r3, r1, #5
 80032c0:	4619      	mov	r1, r3
 80032c2:	4622      	mov	r2, r4
 80032c4:	1b49      	subs	r1, r1, r5
 80032c6:	eb62 0206 	sbc.w	r2, r2, r6
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	f04f 0400 	mov.w	r4, #0
 80032d2:	0194      	lsls	r4, r2, #6
 80032d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032d8:	018b      	lsls	r3, r1, #6
 80032da:	1a5b      	subs	r3, r3, r1
 80032dc:	eb64 0402 	sbc.w	r4, r4, r2
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	00e2      	lsls	r2, r4, #3
 80032ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032ee:	00d9      	lsls	r1, r3, #3
 80032f0:	460b      	mov	r3, r1
 80032f2:	4614      	mov	r4, r2
 80032f4:	195b      	adds	r3, r3, r5
 80032f6:	eb44 0406 	adc.w	r4, r4, r6
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	0262      	lsls	r2, r4, #9
 8003304:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003308:	0259      	lsls	r1, r3, #9
 800330a:	460b      	mov	r3, r1
 800330c:	4614      	mov	r4, r2
 800330e:	4618      	mov	r0, r3
 8003310:	4621      	mov	r1, r4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f04f 0400 	mov.w	r4, #0
 8003318:	461a      	mov	r2, r3
 800331a:	4623      	mov	r3, r4
 800331c:	f7fc ff5a 	bl	80001d4 <__aeabi_uldivmod>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e049      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003328:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea03 0501 	and.w	r5, r3, r1
 800333e:	ea04 0602 	and.w	r6, r4, r2
 8003342:	4629      	mov	r1, r5
 8003344:	4632      	mov	r2, r6
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	0154      	lsls	r4, r2, #5
 8003350:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003354:	014b      	lsls	r3, r1, #5
 8003356:	4619      	mov	r1, r3
 8003358:	4622      	mov	r2, r4
 800335a:	1b49      	subs	r1, r1, r5
 800335c:	eb62 0206 	sbc.w	r2, r2, r6
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	0194      	lsls	r4, r2, #6
 800336a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800336e:	018b      	lsls	r3, r1, #6
 8003370:	1a5b      	subs	r3, r3, r1
 8003372:	eb64 0402 	sbc.w	r4, r4, r2
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	00e2      	lsls	r2, r4, #3
 8003380:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003384:	00d9      	lsls	r1, r3, #3
 8003386:	460b      	mov	r3, r1
 8003388:	4614      	mov	r4, r2
 800338a:	195b      	adds	r3, r3, r5
 800338c:	eb44 0406 	adc.w	r4, r4, r6
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	02a2      	lsls	r2, r4, #10
 800339a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800339e:	0299      	lsls	r1, r3, #10
 80033a0:	460b      	mov	r3, r1
 80033a2:	4614      	mov	r4, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	4621      	mov	r1, r4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f04f 0400 	mov.w	r4, #0
 80033ae:	461a      	mov	r2, r3
 80033b0:	4623      	mov	r3, r4
 80033b2:	f7fc ff0f 	bl	80001d4 <__aeabi_uldivmod>
 80033b6:	4603      	mov	r3, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	60bb      	str	r3, [r7, #8]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033da:	60bb      	str	r3, [r7, #8]
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	68bb      	ldr	r3, [r7, #8]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000014 	.word	0x20000014

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff0 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003414:	4601      	mov	r1, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4a03      	ldr	r2, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08005d24 	.word	0x08005d24

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffdc 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800343c:	4601      	mov	r1, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	08005d24 	.word	0x08005d24

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e056      	b.n	800351c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fe fabb 	bl	8001a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0104 	and.w	r1, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_SPI_Transmit+0x22>
 8003542:	2302      	movs	r3, #2
 8003544:	e11e      	b.n	8003784 <HAL_SPI_Transmit+0x260>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354e:	f7fe fc9f 	bl	8001e90 <HAL_GetTick>
 8003552:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d002      	beq.n	800356a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003564:	2302      	movs	r3, #2
 8003566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003568:	e103      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Transmit+0x52>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800357a:	e0fa      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2203      	movs	r2, #3
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d107      	bne.n	80035d4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d007      	beq.n	80035f2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d14b      	bne.n	8003694 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Transmit+0xe6>
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d13e      	bne.n	8003688 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	881a      	ldrh	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	1c9a      	adds	r2, r3, #2
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800362e:	e02b      	b.n	8003688 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d112      	bne.n	8003664 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	881a      	ldrh	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	86da      	strh	r2, [r3, #54]	; 0x36
 8003662:	e011      	b.n	8003688 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003664:	f7fe fc14 	bl	8001e90 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d803      	bhi.n	800367c <HAL_SPI_Transmit+0x158>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d102      	bne.n	8003682 <HAL_SPI_Transmit+0x15e>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003686:	e074      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ce      	bne.n	8003630 <HAL_SPI_Transmit+0x10c>
 8003692:	e04c      	b.n	800372e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_Transmit+0x17e>
 800369c:	8afb      	ldrh	r3, [r7, #22]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d140      	bne.n	8003724 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036c8:	e02c      	b.n	8003724 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d113      	bne.n	8003700 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80036fe:	e011      	b.n	8003724 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003700:	f7fe fbc6 	bl	8001e90 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d803      	bhi.n	8003718 <HAL_SPI_Transmit+0x1f4>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003716:	d102      	bne.n	800371e <HAL_SPI_Transmit+0x1fa>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003722:	e026      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1cd      	bne.n	80036ca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fcd0 	bl	80040d8 <SPI_EndRxTxTransaction>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e000      	b.n	8003772 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003782:	7ffb      	ldrb	r3, [r7, #31]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800379a:	2301      	movs	r3, #1
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x26>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e18a      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x33c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ba:	f7fe fb69 	bl	8001e90 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d00f      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x70>
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e2:	d107      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x68>
 80037ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d003      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037fa:	e15b      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_SPI_TransmitReceive+0x82>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_TransmitReceive+0x82>
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003814:	e14e      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	887a      	ldrh	r2, [r7, #2]
 8003852:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d007      	beq.n	800387e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003886:	d178      	bne.n	800397a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x10a>
 8003890:	8b7b      	ldrh	r3, [r7, #26]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d166      	bne.n	8003964 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	881a      	ldrh	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ba:	e053      	b.n	8003964 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d11b      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x176>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_SPI_TransmitReceive+0x176>
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d113      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	1c9a      	adds	r2, r3, #2
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d119      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x1b8>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d014      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	b292      	uxth	r2, r2
 8003926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	1c9a      	adds	r2, r3, #2
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003940:	2301      	movs	r3, #1
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003944:	f7fe faa4 	bl	8001e90 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003950:	429a      	cmp	r2, r3
 8003952:	d807      	bhi.n	8003964 <HAL_SPI_TransmitReceive+0x1d8>
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d003      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003962:	e0a7      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1a6      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x130>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1a1      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x130>
 8003978:	e07c      	b.n	8003a74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x1fc>
 8003982:	8b7b      	ldrh	r3, [r7, #26]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d16b      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ae:	e057      	b.n	8003a60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11c      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x26c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_SPI_TransmitReceive+0x26c>
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d114      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d119      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x2ae>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d014      	beq.n	8003a3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a36:	2301      	movs	r3, #1
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a3a:	f7fe fa29 	bl	8001e90 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d803      	bhi.n	8003a52 <HAL_SPI_TransmitReceive+0x2c6>
 8003a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_TransmitReceive+0x2cc>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a5e:	e029      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1a2      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x224>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d19d      	bne.n	80039b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fb2d 	bl	80040d8 <SPI_EndRxTxTransaction>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a90:	e010      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	e000      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3730      	adds	r7, #48	; 0x30
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0e3      	b.n	8003cb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003afe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b06:	7dbb      	ldrb	r3, [r7, #22]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d00d      	beq.n	8003b28 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d106      	bne.n	8003b22 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003b1c:	7dbb      	ldrb	r3, [r7, #22]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d002      	beq.n	8003b28 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
 8003b24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b26:	e0c2      	b.n	8003cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b34:	887b      	ldrh	r3, [r7, #2]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b3e:	e0b6      	b.n	8003cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d003      	beq.n	8003b54 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	887a      	ldrh	r2, [r7, #2]
 8003b6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	887a      	ldrh	r2, [r7, #2]
 8003b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d108      	bne.n	8003ba8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	4a49      	ldr	r2, [pc, #292]	; (8003cc0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ba6:	e007      	b.n	8003bb8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	4a46      	ldr	r2, [pc, #280]	; (8003cc8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb4:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	4a44      	ldr	r2, [pc, #272]	; (8003cd0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003be0:	f7fe fb44 	bl	800226c <HAL_DMA_Start_IT>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c02:	e054      	b.n	8003cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	2200      	movs	r2, #0
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	2200      	movs	r2, #0
 8003c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	2200      	movs	r2, #0
 8003c32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c4c:	f7fe fb0e 	bl	800226c <HAL_DMA_Start_IT>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0210 	orr.w	r2, r3, #16
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c6e:	e01e      	b.n	8003cae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d007      	beq.n	8003c8e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0202 	orr.w	r2, r2, #2
 8003cac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	08003ec1 	.word	0x08003ec1
 8003cc4:	08003dad 	.word	0x08003dad
 8003cc8:	08003edd 	.word	0x08003edd
 8003ccc:	08003e31 	.word	0x08003e31
 8003cd0:	08003ef9 	.word	0x08003ef9

08003cd4 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_SPI_DMAPause+0x16>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e010      	b.n	8003d0c <HAL_SPI_DMAPause+0x38>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0203 	bic.w	r2, r2, #3
 8003d00:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_SPI_DMAResume+0x16>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e010      	b.n	8003d50 <HAL_SPI_DMAResume+0x38>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0203 	orr.w	r2, r2, #3
 8003d44:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dba:	f7fe f869 	bl	8001e90 <HAL_GetTick>
 8003dbe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dce:	d029      	beq.n	8003e24 <SPI_DMAReceiveCplt+0x78>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0220 	bic.w	r2, r2, #32
 8003dde:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0203 	bic.w	r2, r2, #3
 8003dee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	2164      	movs	r1, #100	; 0x64
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f909 	bl	800400c <SPI_EndRxTransaction>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <SPI_DMAReceiveCplt+0x78>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ffbb 	bl	8003d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e22:	e002      	b.n	8003e2a <SPI_DMAReceiveCplt+0x7e>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7ff ff99 	bl	8003d5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e3e:	f7fe f827 	bl	8001e90 <HAL_GetTick>
 8003e42:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	d02f      	beq.n	8003eb4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0220 	bic.w	r2, r2, #32
 8003e62:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	2164      	movs	r1, #100	; 0x64
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f935 	bl	80040d8 <SPI_EndRxTxTransaction>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0203 	bic.w	r2, r2, #3
 8003e8e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff ff73 	bl	8003d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003eb2:	e002      	b.n	8003eba <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7fc fb79 	bl	80005ac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ff4e 	bl	8003d70 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7ff ff4a 	bl	8003d84 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0203 	bic.w	r2, r2, #3
 8003f14:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	f043 0210 	orr.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff ff34 	bl	8003d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f48:	e04c      	b.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d048      	beq.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f52:	f7fd ff9d 	bl	8001e90 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d902      	bls.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d13d      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f80:	d111      	bne.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8a:	d004      	beq.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f94:	d107      	bne.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	d10f      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e00f      	b.n	8004004 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d1a3      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004020:	d111      	bne.n	8004046 <SPI_EndRxTransaction+0x3a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402a:	d004      	beq.n	8004036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d107      	bne.n	8004046 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d12a      	bne.n	80040a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004058:	d012      	beq.n	8004080 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	2180      	movs	r1, #128	; 0x80
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff ff67 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02d      	beq.n	80040cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e026      	b.n	80040ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	2101      	movs	r1, #1
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff ff54 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01a      	beq.n	80040cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e013      	b.n	80040ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2200      	movs	r2, #0
 80040ae:	2101      	movs	r1, #1
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ff41 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e000      	b.n	80040ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <SPI_EndRxTxTransaction+0x7c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <SPI_EndRxTxTransaction+0x80>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	0d5b      	lsrs	r3, r3, #21
 80040f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f4:	fb02 f303 	mul.w	r3, r2, r3
 80040f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004102:	d112      	bne.n	800412a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	2180      	movs	r1, #128	; 0x80
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f7ff ff12 	bl	8003f38 <SPI_WaitFlagStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e00f      	b.n	800414a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3b01      	subs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d0f2      	beq.n	800412a <SPI_EndRxTxTransaction+0x52>
 8004144:	e000      	b.n	8004148 <SPI_EndRxTxTransaction+0x70>
        break;
 8004146:	bf00      	nop
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000014 	.word	0x20000014
 8004158:	165e9f81 	.word	0x165e9f81

0800415c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01d      	b.n	80041aa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd fab8 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f000 fa3a 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01d      	b.n	8004200 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f815 	bl	8004208 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f000 fa0f 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fc96 	bl	8004b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_TIM_PWM_Start+0x60>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d107      	bne.n	800424e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b06      	cmp	r3, #6
 800425e:	d007      	beq.n	8004270 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000

08004280 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fc64 	bl	8004b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <HAL_TIM_PWM_Stop+0x94>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d117      	bne.n	80042d2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_TIM_PWM_Stop+0x52>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	f240 4344 	movw	r3, #1092	; 0x444
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_PWM_Stop+0x52>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_TIM_PWM_Stop+0x82>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	f240 4344 	movw	r3, #1092	; 0x444
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_PWM_Stop+0x82>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010000 	.word	0x40010000

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e0b4      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	f200 809f 	bhi.w	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004385 	.word	0x08004385
 8004354:	08004489 	.word	0x08004489
 8004358:	08004489 	.word	0x08004489
 800435c:	08004489 	.word	0x08004489
 8004360:	080043c5 	.word	0x080043c5
 8004364:	08004489 	.word	0x08004489
 8004368:	08004489 	.word	0x08004489
 800436c:	08004489 	.word	0x08004489
 8004370:	08004407 	.word	0x08004407
 8004374:	08004489 	.word	0x08004489
 8004378:	08004489 	.word	0x08004489
 800437c:	08004489 	.word	0x08004489
 8004380:	08004447 	.word	0x08004447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f9c2 	bl	8004714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
      break;
 80043c2:	e062      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa08 	bl	80047e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	619a      	str	r2, [r3, #24]
      break;
 8004404:	e041      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa53 	bl	80048b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0208 	orr.w	r2, r2, #8
 8004420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	61da      	str	r2, [r3, #28]
      break;
 8004444:	e021      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa9d 	bl	800498c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	61da      	str	r2, [r3, #28]
      break;
 8004486:	e000      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004488:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_ConfigClockSource+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0a6      	b.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d067      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0x120>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d80b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x6c>
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d073      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d802      	bhi.n	8004506 <HAL_TIM_ConfigClockSource+0x62>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d06f      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004504:	e078      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004506:	2b20      	cmp	r3, #32
 8004508:	d06c      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
 800450a:	2b30      	cmp	r3, #48	; 0x30
 800450c:	d06a      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800450e:	e073      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d00d      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x8c>
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d804      	bhi.n	8004522 <HAL_TIM_ConfigClockSource+0x7e>
 8004518:	2b50      	cmp	r3, #80	; 0x50
 800451a:	d033      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0xe0>
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d041      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004520:	e06a      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d066      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x152>
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452c:	d017      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800452e:	e063      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f000 faee 	bl	8004b20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004552:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	609a      	str	r2, [r3, #8]
      break;
 800455c:	e04c      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 fad7 	bl	8004b20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004580:	609a      	str	r2, [r3, #8]
      break;
 8004582:	e039      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 fa4b 	bl	8004a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2150      	movs	r1, #80	; 0x50
 800459c:	4618      	mov	r0, r3
 800459e:	f000 faa4 	bl	8004aea <TIM_ITRx_SetConfig>
      break;
 80045a2:	e029      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f000 fa6a 	bl	8004a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2160      	movs	r1, #96	; 0x60
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fa94 	bl	8004aea <TIM_ITRx_SetConfig>
      break;
 80045c2:	e019      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f000 fa2b 	bl	8004a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa84 	bl	8004aea <TIM_ITRx_SetConfig>
      break;
 80045e2:	e009      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 fa7b 	bl	8004aea <TIM_ITRx_SetConfig>
      break;
 80045f4:	e000      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a34      	ldr	r2, [pc, #208]	; (80046f8 <TIM_Base_SetConfig+0xe4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_Base_SetConfig+0x38>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d00b      	beq.n	800464c <TIM_Base_SetConfig+0x38>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a31      	ldr	r2, [pc, #196]	; (80046fc <TIM_Base_SetConfig+0xe8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_Base_SetConfig+0x38>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a30      	ldr	r2, [pc, #192]	; (8004700 <TIM_Base_SetConfig+0xec>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0x38>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <TIM_Base_SetConfig+0xf0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d108      	bne.n	800465e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <TIM_Base_SetConfig+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01b      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466c:	d017      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <TIM_Base_SetConfig+0xe8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a21      	ldr	r2, [pc, #132]	; (8004700 <TIM_Base_SetConfig+0xec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00f      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <TIM_Base_SetConfig+0xf0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00b      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1f      	ldr	r2, [pc, #124]	; (8004708 <TIM_Base_SetConfig+0xf4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d007      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1e      	ldr	r2, [pc, #120]	; (800470c <TIM_Base_SetConfig+0xf8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <TIM_Base_SetConfig+0xfc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <TIM_Base_SetConfig+0xe4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d103      	bne.n	80046e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	615a      	str	r2, [r3, #20]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40014000 	.word	0x40014000
 800470c:	40014400 	.word	0x40014400
 8004710:	40014800 	.word	0x40014800

08004714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0302 	bic.w	r3, r3, #2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <TIM_OC1_SetConfig+0xc8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10c      	bne.n	800478a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0308 	bic.w	r3, r3, #8
 8004776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <TIM_OC1_SetConfig+0xc8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d111      	bne.n	80047b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40010000 	.word	0x40010000

080047e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0210 	bic.w	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0320 	bic.w	r3, r3, #32
 800482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <TIM_OC2_SetConfig+0xd4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10d      	bne.n	800485c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <TIM_OC2_SetConfig+0xd4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d113      	bne.n	800488c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40010000 	.word	0x40010000

080048b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <TIM_OC3_SetConfig+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10d      	bne.n	8004932 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800491c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <TIM_OC3_SetConfig+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d113      	bne.n	8004962 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40010000 	.word	0x40010000

0800498c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <TIM_OC4_SetConfig+0x9c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d109      	bne.n	8004a00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	019b      	lsls	r3, r3, #6
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	621a      	str	r2, [r3, #32]
}
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000

08004a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0201 	bic.w	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 030a 	bic.w	r3, r3, #10
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0210 	bic.w	r2, r3, #16
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f043 0307 	orr.w	r3, r3, #7
 8004b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	609a      	str	r2, [r3, #8]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2201      	movs	r2, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	401a      	ands	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e050      	b.n	8004c66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d018      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d013      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10c      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40014000 	.word	0x40014000

08004c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e03f      	b.n	8004d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fdbc 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	; 0x24
 8004cb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fc21 	bl	8005514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d153      	bne.n	8004de6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_UART_Transmit_DMA+0x26>
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e04c      	b.n	8004de8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Transmit_DMA+0x38>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e045      	b.n	8004de8 <HAL_UART_Transmit_DMA+0xc4>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2221      	movs	r2, #33	; 0x21
 8004d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_UART_Transmit_DMA+0xcc>)
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <HAL_UART_Transmit_DMA+0xd0>)
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <HAL_UART_Transmit_DMA+0xd4>)
 8004d9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2200      	movs	r2, #0
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3304      	adds	r3, #4
 8004db8:	461a      	mov	r2, r3
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	f7fd fa56 	bl	800226c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	080051a5 	.word	0x080051a5
 8004df4:	080051f7 	.word	0x080051f7
 8004df8:	08005213 	.word	0x08005213

08004dfc <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_DMAPause+0x1a>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e050      	b.n	8004eb8 <HAL_UART_DMAPause+0xbc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b21      	cmp	r3, #33	; 0x21
 8004e3e:	d10a      	bne.n	8004e56 <HAL_UART_DMAPause+0x5a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_UART_DMAPause+0x5a>
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e54:	615a      	str	r2, [r3, #20]
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b22      	cmp	r3, #34	; 0x22
 8004e76:	d11a      	bne.n	8004eae <HAL_UART_DMAPause+0xb2>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <HAL_UART_DMAPause+0xb2>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e8c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eac:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_DMAResume+0x16>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e03f      	b.n	8004f5a <HAL_UART_DMAResume+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b21      	cmp	r3, #33	; 0x21
 8004eec:	d107      	bne.n	8004efe <HAL_UART_DMAResume+0x3a>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004efc:	615a      	str	r2, [r3, #20]
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b22      	cmp	r3, #34	; 0x22
 8004f08:	d122      	bne.n	8004f50 <HAL_UART_DMAResume+0x8c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2e:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	615a      	str	r2, [r3, #20]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x52>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa2d 	bl	8005412 <UART_Receive_IT>
      return;
 8004fb8:	e0d1      	b.n	800515e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80b0 	beq.w	8005122 <HAL_UART_IRQHandler+0x1ba>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x70>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80a5 	beq.w	8005122 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x90>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_UART_IRQHandler+0xb0>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	f043 0202 	orr.w	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_UART_IRQHandler+0xd0>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	f043 0204 	orr.w	r2, r3, #4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00f      	beq.n	8005062 <HAL_UART_IRQHandler+0xfa>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_IRQHandler+0xee>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d078      	beq.n	800515c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_UART_IRQHandler+0x11c>
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9c7 	bl	8005412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_UART_IRQHandler+0x144>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d031      	beq.n	8005110 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f910 	bl	80052d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d123      	bne.n	8005108 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d013      	beq.n	8005100 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	4a21      	ldr	r2, [pc, #132]	; (8005164 <HAL_UART_IRQHandler+0x1fc>)
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd f919 	bl	800231c <HAL_DMA_Abort_IT>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d016      	beq.n	800511e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050fa:	4610      	mov	r0, r2
 80050fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fe:	e00e      	b.n	800511e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f845 	bl	8005190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005106:	e00a      	b.n	800511e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f841 	bl	8005190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510e:	e006      	b.n	800511e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f83d 	bl	8005190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800511c:	e01e      	b.n	800515c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511e:	bf00      	nop
    return;
 8005120:	e01c      	b.n	800515c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x1d6>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8fd 	bl	8005336 <UART_Transmit_IT>
    return;
 800513c:	e00f      	b.n	800515e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00a      	beq.n	800515e <HAL_UART_IRQHandler+0x1f6>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f945 	bl	80053e2 <UART_EndTransmit_IT>
    return;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <HAL_UART_IRQHandler+0x1f6>
    return;
 800515c:	bf00      	nop
  }
}
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	0800530f 	.word	0x0800530f

08005168 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d113      	bne.n	80051e8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051e6:	e002      	b.n	80051ee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7fc f8f3 	bl	80013d4 <HAL_UART_TxCpltCallback>
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7ff ffaf 	bl	8005168 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b80      	cmp	r3, #128	; 0x80
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b21      	cmp	r3, #33	; 0x21
 8005244:	d108      	bne.n	8005258 <UART_DMAError+0x46>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2200      	movs	r2, #0
 8005250:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005252:	68b8      	ldr	r0, [r7, #8]
 8005254:	f000 f827 	bl	80052a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	d108      	bne.n	800528c <UART_DMAError+0x7a>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005286:	68b8      	ldr	r0, [r7, #8]
 8005288:	f000 f823 	bl	80052d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	f043 0210 	orr.w	r2, r3, #16
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005298:	68b8      	ldr	r0, [r7, #8]
 800529a:	f7ff ff79 	bl	8005190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80052bc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ff31 	bl	8005190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b21      	cmp	r3, #33	; 0x21
 8005348:	d144      	bne.n	80053d4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d11a      	bne.n	800538a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005368:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d105      	bne.n	800537e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	e00e      	b.n	800539c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]
 8005388:	e008      	b.n	800539c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6211      	str	r1, [r2, #32]
 8005394:	781a      	ldrb	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4619      	mov	r1, r3
 80053aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10f      	bne.n	80053d0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e000      	b.n	80053d6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fb ffe6 	bl	80013d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b084      	sub	sp, #16
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b22      	cmp	r3, #34	; 0x22
 8005424:	d171      	bne.n	800550a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d123      	bne.n	8005478 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10e      	bne.n	800545c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	b29b      	uxth	r3, r3
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	629a      	str	r2, [r3, #40]	; 0x28
 800545a:	e029      	b.n	80054b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	b29b      	uxth	r3, r3
 8005464:	b2db      	uxtb	r3, r3
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	629a      	str	r2, [r3, #40]	; 0x28
 8005476:	e01b      	b.n	80054b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6858      	ldr	r0, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6291      	str	r1, [r2, #40]	; 0x28
 8005490:	b2c2      	uxtb	r2, r0
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e00c      	b.n	80054b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	1c58      	adds	r0, r3, #1
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	6288      	str	r0, [r1, #40]	; 0x28
 80054a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4619      	mov	r1, r3
 80054be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d120      	bne.n	8005506 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0220 	bic.w	r2, r2, #32
 80054d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fe3d 	bl	800517c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e002      	b.n	800550c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005556:	f023 030c 	bic.w	r3, r3, #12
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	430b      	orrs	r3, r1
 8005562:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005582:	f040 818b 	bne.w	800589c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4ac1      	ldr	r2, [pc, #772]	; (8005890 <UART_SetConfig+0x37c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d005      	beq.n	800559c <UART_SetConfig+0x88>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4abf      	ldr	r2, [pc, #764]	; (8005894 <UART_SetConfig+0x380>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 80bd 	bne.w	8005716 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7fd ff4a 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 80055a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	461d      	mov	r5, r3
 80055a6:	f04f 0600 	mov.w	r6, #0
 80055aa:	46a8      	mov	r8, r5
 80055ac:	46b1      	mov	r9, r6
 80055ae:	eb18 0308 	adds.w	r3, r8, r8
 80055b2:	eb49 0409 	adc.w	r4, r9, r9
 80055b6:	4698      	mov	r8, r3
 80055b8:	46a1      	mov	r9, r4
 80055ba:	eb18 0805 	adds.w	r8, r8, r5
 80055be:	eb49 0906 	adc.w	r9, r9, r6
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055d6:	4688      	mov	r8, r1
 80055d8:	4691      	mov	r9, r2
 80055da:	eb18 0005 	adds.w	r0, r8, r5
 80055de:	eb49 0106 	adc.w	r1, r9, r6
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	461d      	mov	r5, r3
 80055e8:	f04f 0600 	mov.w	r6, #0
 80055ec:	196b      	adds	r3, r5, r5
 80055ee:	eb46 0406 	adc.w	r4, r6, r6
 80055f2:	461a      	mov	r2, r3
 80055f4:	4623      	mov	r3, r4
 80055f6:	f7fa fded 	bl	80001d4 <__aeabi_uldivmod>
 80055fa:	4603      	mov	r3, r0
 80055fc:	460c      	mov	r4, r1
 80055fe:	461a      	mov	r2, r3
 8005600:	4ba5      	ldr	r3, [pc, #660]	; (8005898 <UART_SetConfig+0x384>)
 8005602:	fba3 2302 	umull	r2, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	461d      	mov	r5, r3
 8005610:	f04f 0600 	mov.w	r6, #0
 8005614:	46a9      	mov	r9, r5
 8005616:	46b2      	mov	sl, r6
 8005618:	eb19 0309 	adds.w	r3, r9, r9
 800561c:	eb4a 040a 	adc.w	r4, sl, sl
 8005620:	4699      	mov	r9, r3
 8005622:	46a2      	mov	sl, r4
 8005624:	eb19 0905 	adds.w	r9, r9, r5
 8005628:	eb4a 0a06 	adc.w	sl, sl, r6
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005638:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800563c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005640:	4689      	mov	r9, r1
 8005642:	4692      	mov	sl, r2
 8005644:	eb19 0005 	adds.w	r0, r9, r5
 8005648:	eb4a 0106 	adc.w	r1, sl, r6
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	196b      	adds	r3, r5, r5
 8005658:	eb46 0406 	adc.w	r4, r6, r6
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	f7fa fdb8 	bl	80001d4 <__aeabi_uldivmod>
 8005664:	4603      	mov	r3, r0
 8005666:	460c      	mov	r4, r1
 8005668:	461a      	mov	r2, r3
 800566a:	4b8b      	ldr	r3, [pc, #556]	; (8005898 <UART_SetConfig+0x384>)
 800566c:	fba3 1302 	umull	r1, r3, r3, r2
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	2164      	movs	r1, #100	; 0x64
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	3332      	adds	r3, #50	; 0x32
 800567e:	4a86      	ldr	r2, [pc, #536]	; (8005898 <UART_SetConfig+0x384>)
 8005680:	fba2 2303 	umull	r2, r3, r2, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800568c:	4498      	add	r8, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	461d      	mov	r5, r3
 8005692:	f04f 0600 	mov.w	r6, #0
 8005696:	46a9      	mov	r9, r5
 8005698:	46b2      	mov	sl, r6
 800569a:	eb19 0309 	adds.w	r3, r9, r9
 800569e:	eb4a 040a 	adc.w	r4, sl, sl
 80056a2:	4699      	mov	r9, r3
 80056a4:	46a2      	mov	sl, r4
 80056a6:	eb19 0905 	adds.w	r9, r9, r5
 80056aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056c2:	4689      	mov	r9, r1
 80056c4:	4692      	mov	sl, r2
 80056c6:	eb19 0005 	adds.w	r0, r9, r5
 80056ca:	eb4a 0106 	adc.w	r1, sl, r6
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	461d      	mov	r5, r3
 80056d4:	f04f 0600 	mov.w	r6, #0
 80056d8:	196b      	adds	r3, r5, r5
 80056da:	eb46 0406 	adc.w	r4, r6, r6
 80056de:	461a      	mov	r2, r3
 80056e0:	4623      	mov	r3, r4
 80056e2:	f7fa fd77 	bl	80001d4 <__aeabi_uldivmod>
 80056e6:	4603      	mov	r3, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	461a      	mov	r2, r3
 80056ec:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <UART_SetConfig+0x384>)
 80056ee:	fba3 1302 	umull	r1, r3, r3, r2
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	2164      	movs	r1, #100	; 0x64
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	3332      	adds	r3, #50	; 0x32
 8005700:	4a65      	ldr	r2, [pc, #404]	; (8005898 <UART_SetConfig+0x384>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 0207 	and.w	r2, r3, #7
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4442      	add	r2, r8
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	e26f      	b.n	8005bf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005716:	f7fd fe79 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 800571a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	461d      	mov	r5, r3
 8005720:	f04f 0600 	mov.w	r6, #0
 8005724:	46a8      	mov	r8, r5
 8005726:	46b1      	mov	r9, r6
 8005728:	eb18 0308 	adds.w	r3, r8, r8
 800572c:	eb49 0409 	adc.w	r4, r9, r9
 8005730:	4698      	mov	r8, r3
 8005732:	46a1      	mov	r9, r4
 8005734:	eb18 0805 	adds.w	r8, r8, r5
 8005738:	eb49 0906 	adc.w	r9, r9, r6
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005748:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800574c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005750:	4688      	mov	r8, r1
 8005752:	4691      	mov	r9, r2
 8005754:	eb18 0005 	adds.w	r0, r8, r5
 8005758:	eb49 0106 	adc.w	r1, r9, r6
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	461d      	mov	r5, r3
 8005762:	f04f 0600 	mov.w	r6, #0
 8005766:	196b      	adds	r3, r5, r5
 8005768:	eb46 0406 	adc.w	r4, r6, r6
 800576c:	461a      	mov	r2, r3
 800576e:	4623      	mov	r3, r4
 8005770:	f7fa fd30 	bl	80001d4 <__aeabi_uldivmod>
 8005774:	4603      	mov	r3, r0
 8005776:	460c      	mov	r4, r1
 8005778:	461a      	mov	r2, r3
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <UART_SetConfig+0x384>)
 800577c:	fba3 2302 	umull	r2, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	461d      	mov	r5, r3
 800578a:	f04f 0600 	mov.w	r6, #0
 800578e:	46a9      	mov	r9, r5
 8005790:	46b2      	mov	sl, r6
 8005792:	eb19 0309 	adds.w	r3, r9, r9
 8005796:	eb4a 040a 	adc.w	r4, sl, sl
 800579a:	4699      	mov	r9, r3
 800579c:	46a2      	mov	sl, r4
 800579e:	eb19 0905 	adds.w	r9, r9, r5
 80057a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80057a6:	f04f 0100 	mov.w	r1, #0
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057ba:	4689      	mov	r9, r1
 80057bc:	4692      	mov	sl, r2
 80057be:	eb19 0005 	adds.w	r0, r9, r5
 80057c2:	eb4a 0106 	adc.w	r1, sl, r6
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	461d      	mov	r5, r3
 80057cc:	f04f 0600 	mov.w	r6, #0
 80057d0:	196b      	adds	r3, r5, r5
 80057d2:	eb46 0406 	adc.w	r4, r6, r6
 80057d6:	461a      	mov	r2, r3
 80057d8:	4623      	mov	r3, r4
 80057da:	f7fa fcfb 	bl	80001d4 <__aeabi_uldivmod>
 80057de:	4603      	mov	r3, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <UART_SetConfig+0x384>)
 80057e6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2164      	movs	r1, #100	; 0x64
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <UART_SetConfig+0x384>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005806:	4498      	add	r8, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	461d      	mov	r5, r3
 800580c:	f04f 0600 	mov.w	r6, #0
 8005810:	46a9      	mov	r9, r5
 8005812:	46b2      	mov	sl, r6
 8005814:	eb19 0309 	adds.w	r3, r9, r9
 8005818:	eb4a 040a 	adc.w	r4, sl, sl
 800581c:	4699      	mov	r9, r3
 800581e:	46a2      	mov	sl, r4
 8005820:	eb19 0905 	adds.w	r9, r9, r5
 8005824:	eb4a 0a06 	adc.w	sl, sl, r6
 8005828:	f04f 0100 	mov.w	r1, #0
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800583c:	4689      	mov	r9, r1
 800583e:	4692      	mov	sl, r2
 8005840:	eb19 0005 	adds.w	r0, r9, r5
 8005844:	eb4a 0106 	adc.w	r1, sl, r6
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	461d      	mov	r5, r3
 800584e:	f04f 0600 	mov.w	r6, #0
 8005852:	196b      	adds	r3, r5, r5
 8005854:	eb46 0406 	adc.w	r4, r6, r6
 8005858:	461a      	mov	r2, r3
 800585a:	4623      	mov	r3, r4
 800585c:	f7fa fcba 	bl	80001d4 <__aeabi_uldivmod>
 8005860:	4603      	mov	r3, r0
 8005862:	460c      	mov	r4, r1
 8005864:	461a      	mov	r2, r3
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <UART_SetConfig+0x384>)
 8005868:	fba3 1302 	umull	r1, r3, r3, r2
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	2164      	movs	r1, #100	; 0x64
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	3332      	adds	r3, #50	; 0x32
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <UART_SetConfig+0x384>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	f003 0207 	and.w	r2, r3, #7
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4442      	add	r2, r8
 800588c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800588e:	e1b2      	b.n	8005bf6 <UART_SetConfig+0x6e2>
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4ad7      	ldr	r2, [pc, #860]	; (8005c00 <UART_SetConfig+0x6ec>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d005      	beq.n	80058b2 <UART_SetConfig+0x39e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4ad6      	ldr	r2, [pc, #856]	; (8005c04 <UART_SetConfig+0x6f0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f040 80d1 	bne.w	8005a54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b2:	f7fd fdbf 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 80058b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	469a      	mov	sl, r3
 80058bc:	f04f 0b00 	mov.w	fp, #0
 80058c0:	46d0      	mov	r8, sl
 80058c2:	46d9      	mov	r9, fp
 80058c4:	eb18 0308 	adds.w	r3, r8, r8
 80058c8:	eb49 0409 	adc.w	r4, r9, r9
 80058cc:	4698      	mov	r8, r3
 80058ce:	46a1      	mov	r9, r4
 80058d0:	eb18 080a 	adds.w	r8, r8, sl
 80058d4:	eb49 090b 	adc.w	r9, r9, fp
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058ec:	4688      	mov	r8, r1
 80058ee:	4691      	mov	r9, r2
 80058f0:	eb1a 0508 	adds.w	r5, sl, r8
 80058f4:	eb4b 0609 	adc.w	r6, fp, r9
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4619      	mov	r1, r3
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	0094      	lsls	r4, r2, #2
 800590c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005910:	008b      	lsls	r3, r1, #2
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	4628      	mov	r0, r5
 8005918:	4631      	mov	r1, r6
 800591a:	f7fa fc5b 	bl	80001d4 <__aeabi_uldivmod>
 800591e:	4603      	mov	r3, r0
 8005920:	460c      	mov	r4, r1
 8005922:	461a      	mov	r2, r3
 8005924:	4bb8      	ldr	r3, [pc, #736]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	469b      	mov	fp, r3
 8005934:	f04f 0c00 	mov.w	ip, #0
 8005938:	46d9      	mov	r9, fp
 800593a:	46e2      	mov	sl, ip
 800593c:	eb19 0309 	adds.w	r3, r9, r9
 8005940:	eb4a 040a 	adc.w	r4, sl, sl
 8005944:	4699      	mov	r9, r3
 8005946:	46a2      	mov	sl, r4
 8005948:	eb19 090b 	adds.w	r9, r9, fp
 800594c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800595c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005960:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005964:	4689      	mov	r9, r1
 8005966:	4692      	mov	sl, r2
 8005968:	eb1b 0509 	adds.w	r5, fp, r9
 800596c:	eb4c 060a 	adc.w	r6, ip, sl
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	0094      	lsls	r4, r2, #2
 8005984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005988:	008b      	lsls	r3, r1, #2
 800598a:	461a      	mov	r2, r3
 800598c:	4623      	mov	r3, r4
 800598e:	4628      	mov	r0, r5
 8005990:	4631      	mov	r1, r6
 8005992:	f7fa fc1f 	bl	80001d4 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	461a      	mov	r2, r3
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <UART_SetConfig+0x6f4>)
 800599e:	fba3 1302 	umull	r1, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2164      	movs	r1, #100	; 0x64
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a95      	ldr	r2, [pc, #596]	; (8005c08 <UART_SetConfig+0x6f4>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059bc:	4498      	add	r8, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	469b      	mov	fp, r3
 80059c2:	f04f 0c00 	mov.w	ip, #0
 80059c6:	46d9      	mov	r9, fp
 80059c8:	46e2      	mov	sl, ip
 80059ca:	eb19 0309 	adds.w	r3, r9, r9
 80059ce:	eb4a 040a 	adc.w	r4, sl, sl
 80059d2:	4699      	mov	r9, r3
 80059d4:	46a2      	mov	sl, r4
 80059d6:	eb19 090b 	adds.w	r9, r9, fp
 80059da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059de:	f04f 0100 	mov.w	r1, #0
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059f2:	4689      	mov	r9, r1
 80059f4:	4692      	mov	sl, r2
 80059f6:	eb1b 0509 	adds.w	r5, fp, r9
 80059fa:	eb4c 060a 	adc.w	r6, ip, sl
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4619      	mov	r1, r3
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	f04f 0400 	mov.w	r4, #0
 8005a10:	0094      	lsls	r4, r2, #2
 8005a12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a16:	008b      	lsls	r3, r1, #2
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	4631      	mov	r1, r6
 8005a20:	f7fa fbd8 	bl	80001d4 <__aeabi_uldivmod>
 8005a24:	4603      	mov	r3, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b77      	ldr	r3, [pc, #476]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	; 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	3332      	adds	r3, #50	; 0x32
 8005a3e:	4a72      	ldr	r2, [pc, #456]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4442      	add	r2, r8
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e0d0      	b.n	8005bf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7fd fcda 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8005a58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	469a      	mov	sl, r3
 8005a5e:	f04f 0b00 	mov.w	fp, #0
 8005a62:	46d0      	mov	r8, sl
 8005a64:	46d9      	mov	r9, fp
 8005a66:	eb18 0308 	adds.w	r3, r8, r8
 8005a6a:	eb49 0409 	adc.w	r4, r9, r9
 8005a6e:	4698      	mov	r8, r3
 8005a70:	46a1      	mov	r9, r4
 8005a72:	eb18 080a 	adds.w	r8, r8, sl
 8005a76:	eb49 090b 	adc.w	r9, r9, fp
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a8e:	4688      	mov	r8, r1
 8005a90:	4691      	mov	r9, r2
 8005a92:	eb1a 0508 	adds.w	r5, sl, r8
 8005a96:	eb4b 0609 	adc.w	r6, fp, r9
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	0094      	lsls	r4, r2, #2
 8005aae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ab2:	008b      	lsls	r3, r1, #2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	4631      	mov	r1, r6
 8005abc:	f7fa fb8a 	bl	80001d4 <__aeabi_uldivmod>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	469b      	mov	fp, r3
 8005ad6:	f04f 0c00 	mov.w	ip, #0
 8005ada:	46d9      	mov	r9, fp
 8005adc:	46e2      	mov	sl, ip
 8005ade:	eb19 0309 	adds.w	r3, r9, r9
 8005ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	46a2      	mov	sl, r4
 8005aea:	eb19 090b 	adds.w	r9, r9, fp
 8005aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b06:	4689      	mov	r9, r1
 8005b08:	4692      	mov	sl, r2
 8005b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	0094      	lsls	r4, r2, #2
 8005b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b2a:	008b      	lsls	r3, r1, #2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	4631      	mov	r1, r6
 8005b34:	f7fa fb4e 	bl	80001d4 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b5e:	4498      	add	r8, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	469b      	mov	fp, r3
 8005b64:	f04f 0c00 	mov.w	ip, #0
 8005b68:	46d9      	mov	r9, fp
 8005b6a:	46e2      	mov	sl, ip
 8005b6c:	eb19 0309 	adds.w	r3, r9, r9
 8005b70:	eb4a 040a 	adc.w	r4, sl, sl
 8005b74:	4699      	mov	r9, r3
 8005b76:	46a2      	mov	sl, r4
 8005b78:	eb19 090b 	adds.w	r9, r9, fp
 8005b7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b94:	4689      	mov	r9, r1
 8005b96:	4692      	mov	sl, r2
 8005b98:	eb1b 0509 	adds.w	r5, fp, r9
 8005b9c:	eb4c 060a 	adc.w	r6, ip, sl
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	f04f 0400 	mov.w	r4, #0
 8005bb2:	0094      	lsls	r4, r2, #2
 8005bb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bb8:	008b      	lsls	r3, r1, #2
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	f7fa fb07 	bl	80001d4 <__aeabi_uldivmod>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005bce:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2164      	movs	r1, #100	; 0x64
 8005bd6:	fb01 f303 	mul.w	r3, r1, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <UART_SetConfig+0x6f4>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4442      	add	r2, r8
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	e7ff      	b.n	8005bf6 <UART_SetConfig+0x6e2>
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	40011000 	.word	0x40011000
 8005c04:	40011400 	.word	0x40011400
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0d      	ldr	r6, [pc, #52]	; (8005c44 <__libc_init_array+0x38>)
 8005c10:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c12:	1ba4      	subs	r4, r4, r6
 8005c14:	10a4      	asrs	r4, r4, #2
 8005c16:	2500      	movs	r5, #0
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	4e0b      	ldr	r6, [pc, #44]	; (8005c4c <__libc_init_array+0x40>)
 8005c1e:	4c0c      	ldr	r4, [pc, #48]	; (8005c50 <__libc_init_array+0x44>)
 8005c20:	f000 f820 	bl	8005c64 <_init>
 8005c24:	1ba4      	subs	r4, r4, r6
 8005c26:	10a4      	asrs	r4, r4, #2
 8005c28:	2500      	movs	r5, #0
 8005c2a:	42a5      	cmp	r5, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c34:	4798      	blx	r3
 8005c36:	3501      	adds	r5, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c3e:	4798      	blx	r3
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08005d3c 	.word	0x08005d3c
 8005c48:	08005d3c 	.word	0x08005d3c
 8005c4c:	08005d3c 	.word	0x08005d3c
 8005c50:	08005d40 	.word	0x08005d40

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <_init>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr

08005c70 <_fini>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr
